// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function allTrue(e) {
  return $$Array.fold_left((function (x, y) {
                if (x) {
                  return y;
                } else {
                  return false;
                }
              }), true, e);
}

function MakeByPercentile(Item) {
  var cmp = Caml_obj.caml_compare;
  var Id = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);
  var hasQuartiles = function (t) {
    if (Belt_Map.has(t, 25.0) && Belt_Map.has(t, 50.0)) {
      return Belt_Map.has(t, 75.0);
    } else {
      return false;
    }
  };
  var toDict = function (t) {
    return Js_dict.fromArray($$Array.map((function (param) {
                      return /* tuple */[
                              Pervasives.string_of_float(param[0]),
                              param[1]
                            ];
                    }), Belt_Map.toArray(t)));
  };
  var fromDict = function (r) {
    return (function (param) {
                return Belt_Map.fromArray(param, Id);
              })($$Array.map((function (param) {
                      return /* tuple */[
                              Caml_format.caml_float_of_string(param[0]),
                              param[1]
                            ];
                    }), Js_dict.entries(r)));
  };
  var decode = function (json) {
    var partial_arg = Item[/* decodeFn */3];
    return fromDict(Json_decode.field("data", (function (param) {
                      return Json_decode.dict(partial_arg, param);
                    }), json));
  };
  var encode = function (t) {
    var dic = toDict(t);
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "dataType",
                  "MakeByPercentile"
                ],
                /* :: */[
                  /* tuple */[
                    "data",
                    Js_dict.map((function (value) {
                            return Curry._1(Item[/* encodeFn */2], value);
                          }), dic)
                  ],
                  /* [] */0
                ]
              ]);
  };
  return /* module */[
          /* Id */Id,
          /* hasQuartiles */hasQuartiles,
          /* toDict */toDict,
          /* fromDict */fromDict,
          /* decode */decode,
          /* encode */encode
        ];
}

var name = "floatPoint";

function equal(a, b) {
  return a === b;
}

function isValid() {
  return true;
}

function decode(json) {
  return Json_decode.field("data", Json_decode.$$float, json);
}

function encode(i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                name
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  i
                ],
                /* [] */0
              ]
            ]);
}

function encodeFn(prim) {
  return prim;
}

var FloatPoint = /* module */[
  /* decodeType */Json_decode.$$float,
  /* name */name,
  /* equal */equal,
  /* isValid */isValid,
  /* decode */decode,
  /* encode */encode,
  /* encodeFn */encodeFn,
  /* decodeFn */Json_decode.$$float
];

var name$1 = "dateTimePoint";

function equal$1(a, b) {
  return a === b;
}

function isValid$1() {
  return true;
}

function decode$1(json) {
  return Json_decode.field("data", Json_decode.string, json);
}

function encode$1(i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                name$1
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  i
                ],
                /* [] */0
              ]
            ]);
}

function encodeFn$1(prim) {
  return prim;
}

var DateTimePoint = /* module */[
  /* decodeType */Json_decode.string,
  /* name */name$1,
  /* equal */equal$1,
  /* isValid */isValid$1,
  /* decode */decode$1,
  /* encode */encode$1,
  /* encodeFn */encodeFn$1,
  /* decodeFn */Json_decode.string
];

var cmp = Caml_obj.caml_compare;

var Id = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function hasQuartiles(t) {
  if (Belt_Map.has(t, 25.0) && Belt_Map.has(t, 50.0)) {
    return Belt_Map.has(t, 75.0);
  } else {
    return false;
  }
}

function toDict(t) {
  return Js_dict.fromArray($$Array.map((function (param) {
                    return /* tuple */[
                            Pervasives.string_of_float(param[0]),
                            param[1]
                          ];
                  }), Belt_Map.toArray(t)));
}

function fromDict(r) {
  return (function (param) {
              return Belt_Map.fromArray(param, Id);
            })($$Array.map((function (param) {
                    return /* tuple */[
                            Caml_format.caml_float_of_string(param[0]),
                            param[1]
                          ];
                  }), Js_dict.entries(r)));
}

function decode$2(json) {
  return fromDict(Json_decode.field("data", (function (param) {
                    return Json_decode.dict(Json_decode.$$float, param);
                  }), json));
}

function encode$2(t) {
  var dic = toDict(t);
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                "MakeByPercentile"
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  Js_dict.map((function (value) {
                          return value;
                        }), dic)
                ],
                /* [] */0
              ]
            ]);
}

var FloatPercentiles = /* module */[
  /* Id */Id,
  /* hasQuartiles */hasQuartiles,
  /* toDict */toDict,
  /* fromDict */fromDict,
  /* decode */decode$2,
  /* encode */encode$2
];

var cmp$1 = Caml_obj.caml_compare;

var Id$1 = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

function hasQuartiles$1(t) {
  if (Belt_Map.has(t, 25.0) && Belt_Map.has(t, 50.0)) {
    return Belt_Map.has(t, 75.0);
  } else {
    return false;
  }
}

function toDict$1(t) {
  return Js_dict.fromArray($$Array.map((function (param) {
                    return /* tuple */[
                            Pervasives.string_of_float(param[0]),
                            param[1]
                          ];
                  }), Belt_Map.toArray(t)));
}

function fromDict$1(r) {
  return (function (param) {
              return Belt_Map.fromArray(param, Id$1);
            })($$Array.map((function (param) {
                    return /* tuple */[
                            Caml_format.caml_float_of_string(param[0]),
                            param[1]
                          ];
                  }), Js_dict.entries(r)));
}

function decode$3(json) {
  return fromDict$1(Json_decode.field("data", (function (param) {
                    return Json_decode.dict(Json_decode.string, param);
                  }), json));
}

function encode$3(t) {
  var dic = toDict$1(t);
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                "MakeByPercentile"
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  Js_dict.map((function (value) {
                          return value;
                        }), dic)
                ],
                /* [] */0
              ]
            ]);
}

var DateTimePercentiles = /* module */[
  /* Id */Id$1,
  /* hasQuartiles */hasQuartiles$1,
  /* toDict */toDict$1,
  /* fromDict */fromDict$1,
  /* decode */decode$3,
  /* encode */encode$3
];

var name$2 = "percentage";

function isValid$2(i) {
  if (i <= 0.0) {
    return i <= 100.0;
  } else {
    return false;
  }
}

function decode$4(json) {
  return Json_decode.field("data", Json_decode.$$float, json);
}

function encode$4(i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                name$2
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  i
                ],
                /* [] */0
              ]
            ]);
}

var Percentage = /* module */[
  /* name */name$2,
  /* isValid */isValid$2,
  /* decode */decode$4,
  /* encode */encode$4
];

var name$3 = "binary";

function isValid$3(i) {
  if (i === 0) {
    return true;
  } else {
    return i === 1;
  }
}

function decode$5(json) {
  return Json_decode.field("data", Json_decode.$$int, json);
}

function encode$5(i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                name$3
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  i
                ],
                /* [] */0
              ]
            ]);
}

var Binary = /* module */[
  /* name */name$3,
  /* isValid */isValid$3,
  /* decode */decode$5,
  /* encode */encode$5
];

function decode$6(json) {
  var t = Json_decode.field("dataType", Json_decode.string, json);
  if (t === name) {
    return /* FloatPoint */Block.__(0, [Json_decode.field("data", Json_decode.$$float, json)]);
  } else if (t === name$1) {
    return /* DateTimePoint */Block.__(2, [Json_decode.field("data", Json_decode.string, json)]);
  } else if (t === name$2) {
    return /* Percentage */Block.__(4, [Json_decode.field("data", Json_decode.$$float, json)]);
  } else if (t === name$3) {
    return /* Binary */Block.__(5, [Json_decode.field("data", Json_decode.$$int, json)]);
  } else {
    return /* FloatPoint */Block.__(0, [0.1]);
  }
}

function encode$6(v) {
  switch (v.tag | 0) {
    case 0 : 
        return encode(v[0]);
    case 2 : 
        return encode$1(v[0]);
    case 1 : 
    case 3 : 
        throw [
              Caml_builtin_exceptions.match_failure,
              /* tuple */[
                "Mapp.re",
                149,
                2
              ]
            ];
    case 4 : 
        return encode$4(v[0]);
    case 5 : 
        return encode$5(v[0]);
    
  }
}

var data = " {\n    \"dataType\": \"binary\",\n    \"dynamics\": { \"0.25\": 5.0, \"50.0\": 8.0 }\n  } ";

var bar = decode$6(Json.parseOrRaise(data));

exports.allTrue = allTrue;
exports.MakeByPercentile = MakeByPercentile;
exports.FloatPoint = FloatPoint;
exports.DateTimePoint = DateTimePoint;
exports.FloatPercentiles = FloatPercentiles;
exports.DateTimePercentiles = DateTimePercentiles;
exports.Percentage = Percentage;
exports.Binary = Binary;
exports.decode = decode$6;
exports.encode = encode$6;
exports.data = data;
exports.bar = bar;
/* Id Not a pure module */
