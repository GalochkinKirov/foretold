// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var FloatMap = $$Map.Make(/* module */[/* compare */compare]);

function isValid() {
  return true;
}

var scores = FloatMap[/* empty */0];

var myMap2 = Curry._3(FloatMap[/* add */3], 0.3, 30.3, scores);

function trioIsValid(t) {
  var match = t[/* p25 */0];
  switch (match.tag | 0) {
    case 0 : 
        var match$1 = t[/* p50 */1];
        switch (match$1.tag | 0) {
          case 0 : 
              var match$2 = t[/* p75 */2];
              var b = match$1[0];
              switch (match$2.tag | 0) {
                case 0 : 
                    if (match[0] <= b) {
                      return b <= match$2[0];
                    } else {
                      return false;
                    }
                case 1 : 
                case 2 : 
                    return false;
                
              }
          case 1 : 
          case 2 : 
              return false;
          
        }
    case 1 : 
        var match$3 = t[/* p50 */1];
        switch (match$3.tag | 0) {
          case 1 : 
              var match$4 = t[/* p75 */2];
              var b$1 = match$3[0];
              switch (match$4.tag | 0) {
                case 1 : 
                    if (match[0] <= b$1) {
                      return b$1 <= match$4[0];
                    } else {
                      return false;
                    }
                case 0 : 
                case 2 : 
                    return false;
                
              }
          case 0 : 
          case 2 : 
              return false;
          
        }
    case 2 : 
        switch (t[/* p50 */1].tag | 0) {
          case 0 : 
          case 1 : 
              return false;
          case 2 : 
              switch (t[/* p75 */2].tag | 0) {
                case 0 : 
                case 1 : 
                    return false;
                case 2 : 
                    return true;
                
              }
          
        }
    
  }
}

function valueIsValid(d) {
  if (d.tag) {
    return true;
  } else {
    return trioIsValid(d[0]);
  }
}

function encodeTrio(t) {
  var match = t[/* p25 */0];
  var match$1 = t[/* p50 */1];
  var match$2 = t[/* p75 */2];
  switch (match.tag | 0) {
    case 0 : 
        switch (match$1.tag | 0) {
          case 0 : 
              switch (match$2.tag | 0) {
                case 0 : 
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "p25",
                                  match[0]
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "p50",
                                    match$1[0]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "p75",
                                      match$2[0]
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]);
                case 1 : 
                case 2 : 
                    throw Caml_builtin_exceptions.not_found;
                
              }
          case 1 : 
          case 2 : 
              throw Caml_builtin_exceptions.not_found;
          
        }
    case 1 : 
        switch (match$1.tag | 0) {
          case 1 : 
              switch (match$2.tag | 0) {
                case 1 : 
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "p25",
                                  match[0]
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "p50",
                                    match$1[0]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "p75",
                                      match$2[0]
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]);
                case 0 : 
                case 2 : 
                    throw Caml_builtin_exceptions.not_found;
                
              }
          case 0 : 
          case 2 : 
              throw Caml_builtin_exceptions.not_found;
          
        }
    case 2 : 
        switch (match$1.tag | 0) {
          case 0 : 
          case 1 : 
              throw Caml_builtin_exceptions.not_found;
          case 2 : 
              switch (match$2.tag | 0) {
                case 0 : 
                case 1 : 
                    throw Caml_builtin_exceptions.not_found;
                case 2 : 
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "p25",
                                  match[0]
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "p50",
                                    match$1[0]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "p75",
                                      match$2[0]
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]);
                
              }
          
        }
    
  }
}

exports.FloatMap = FloatMap;
exports.isValid = isValid;
exports.scores = scores;
exports.myMap2 = myMap2;
exports.trioIsValid = trioIsValid;
exports.valueIsValid = valueIsValid;
exports.encodeTrio = encodeTrio;
/* FloatMap Not a pure module */
