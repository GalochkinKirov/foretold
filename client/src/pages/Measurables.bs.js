// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$Client = require("../utils/Utils.bs.js");
var Queries$Client = require("./Queries.bs.js");
var Result$Rationale = require("rationale/src/Result.js");
var HandsOnTable$Client = require("../utils/HandsOnTable.bs.js");
var NormalLayout$Client = require("../utils/NormalLayout.bs.js");

function toMeasurableLink(m) {
  var id = m[/* id */0];
  var name = m[/* name */1];
  return "<a href=\"/measurables/" + (String(id) + ("\">" + (String(name) + "</a>")));
}

function showQueryList(data, _, _$1) {
  var ddata = $$Array.map((function (e) {
          return Js_dict.fromList(/* :: */[
                      /* tuple */[
                        "name",
                        toMeasurableLink(e)
                      ],
                      /* :: */[
                        /* tuple */[
                          "id",
                          e[/* id */0]
                        ],
                        /* :: */[
                          /* tuple */[
                            "createdAt",
                            e[/* createdAt */2]
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
        }), data);
  var columns = /* array */[
    HandsOnTable$Client.makeColumn("name", "html", undefined, /* () */0),
    HandsOnTable$Client.makeColumn("createdAt", undefined, undefined, /* () */0)
  ];
  return ReasonReact.element(undefined, undefined, HandsOnTable$Client.make(ddata, columns, /* array */[
                  "",
                  "",
                  ""
                ], /* array */[]));
}

function arg(e) {
  return "/measurables/" + e.id;
}

function arg$1(e) {
  return Utils$Client.ste(e.name);
}

function itemList(param) {
  return showQueryList(param, arg, arg$1);
}

var component = ReasonReact.statelessComponent("Measurables");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var eta = Curry.app(Queries$Client.GetMeasurablesQuery[/* make */3], [
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    (function (o) {
                        return Result$Rationale.result(Utils$Client.idd, Utils$Client.idd, Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* <$> */1], Utils$Client.apolloResponseToResult(o[/* result */0]), (function (d) {
                                                  return d.measurables;
                                                })), Utils$Client.catOptionals), itemList));
                      })
                  ]);
              var eta$1 = NormalLayout$Client.make("Measurables", ReasonReact.element(undefined, undefined, eta));
              return ReasonReact.element(undefined, undefined, eta$1);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.toMeasurableLink = toMeasurableLink;
exports.showQueryList = showQueryList;
exports.itemList = itemList;
exports.component = component;
exports.make = make;
/* component Not a pure module */
