// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var MomentRe = require("bs-moment/src/MomentRe.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Queries$Client = require("../Queries.bs.js");
var Function$Rationale = require("rationale/src/Function.js");

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function toMoment(param) {
  return partial_arg(Queries$Client.jsonToString, (function (eta) {
                return MomentRe.moment(undefined, eta);
              }), param);
}

function toOptionalMoment(e) {
  var eta = e !== undefined ? Queries$Client.jsonToString(Js_primitive.valFromOption(e)) : "";
  return MomentRe.moment(undefined, eta);
}

var ppx_printed_query = "query getAgent($id: String!)  {\nagent: agent(id: $id)  {\nuser: User  {\nid  \nname  \n}\n\nbot: Bot  {\nid  \nname  \ndescription  \ncompetitorType  \n}\n\nmeasurements: Measurements  {\nid  \ncreatedAt  \nrelevantAt  \ncompetitorType  \ntaggedMeasurementId  \nmeasurable: Measurable  {\nid  \nname  \nisLocked  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["agent"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Js_primitive.valFromOption(match$3);
          var match$4 = value$1["user"];
          var field_user;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeNull(match$4);
            if (match$5 !== undefined) {
              field_user = undefined;
            } else {
              var match$6 = Js_json.decodeObject(match$4);
              var tmp$2;
              if (match$6 !== undefined) {
                var value$2 = Js_primitive.valFromOption(match$6);
                var match$7 = value$2["id"];
                var field_id;
                if (match$7 !== undefined) {
                  var match$8 = Js_json.decodeString(match$7);
                  field_id = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$7));
                } else {
                  field_id = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                }
                var match$9 = value$2["name"];
                var field_name;
                if (match$9 !== undefined) {
                  var match$10 = Js_json.decodeString(match$9);
                  field_name = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$9));
                } else {
                  field_name = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                }
                tmp$2 = /* record */[
                  /* id */field_id,
                  /* name */field_name
                ];
              } else {
                tmp$2 = Js_exn.raiseError("graphql_ppx: Expected object of type User, got " + JSON.stringify(match$4));
              }
              field_user = tmp$2;
            }
          } else {
            field_user = undefined;
          }
          var match$11 = value$1["bot"];
          var field_bot;
          if (match$11 !== undefined) {
            var match$12 = Js_json.decodeNull(match$11);
            if (match$12 !== undefined) {
              field_bot = undefined;
            } else {
              var match$13 = Js_json.decodeObject(match$11);
              var tmp$3;
              if (match$13 !== undefined) {
                var value$3 = Js_primitive.valFromOption(match$13);
                var match$14 = value$3["id"];
                var field_id$1;
                if (match$14 !== undefined) {
                  var match$15 = Js_json.decodeString(match$14);
                  field_id$1 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$14));
                } else {
                  field_id$1 = Js_exn.raiseError("graphql_ppx: Field id on type Bot is missing");
                }
                var match$16 = value$3["name"];
                var field_name$1;
                if (match$16 !== undefined) {
                  var match$17 = Js_json.decodeNull(match$16);
                  if (match$17 !== undefined) {
                    field_name$1 = undefined;
                  } else {
                    var match$18 = Js_json.decodeString(match$16);
                    field_name$1 = match$18 !== undefined ? match$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$16));
                  }
                } else {
                  field_name$1 = undefined;
                }
                var match$19 = value$3["description"];
                var field_description;
                if (match$19 !== undefined) {
                  var match$20 = Js_json.decodeNull(match$19);
                  if (match$20 !== undefined) {
                    field_description = undefined;
                  } else {
                    var match$21 = Js_json.decodeString(match$19);
                    field_description = match$21 !== undefined ? match$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$19));
                  }
                } else {
                  field_description = undefined;
                }
                var match$22 = value$3["competitorType"];
                var field_competitorType;
                if (match$22 !== undefined) {
                  var match$23 = Js_json.decodeString(match$22);
                  if (match$23 !== undefined) {
                    var value$4 = match$23;
                    switch (value$4) {
                      case "AGGREGATION" : 
                          field_competitorType = /* AGGREGATION */497422978;
                          break;
                      case "COMPETITIVE" : 
                          field_competitorType = /* COMPETITIVE */-288189265;
                          break;
                      case "OBJECTIVE" : 
                          field_competitorType = /* OBJECTIVE */1055622745;
                          break;
                      default:
                        field_competitorType = Js_exn.raiseError("graphql_ppx: Unknown enum variant for competitorType: " + value$4);
                    }
                  } else {
                    field_competitorType = Js_exn.raiseError("graphql_ppx: Expected enum value for competitorType, got " + JSON.stringify(match$22));
                  }
                } else {
                  field_competitorType = Js_exn.raiseError("graphql_ppx: Field competitorType on type Bot is missing");
                }
                tmp$3 = /* record */[
                  /* competitorType */field_competitorType,
                  /* description */field_description,
                  /* id */field_id$1,
                  /* name */field_name$1
                ];
              } else {
                tmp$3 = Js_exn.raiseError("graphql_ppx: Expected object of type Bot, got " + JSON.stringify(match$11));
              }
              field_bot = tmp$3;
            }
          } else {
            field_bot = undefined;
          }
          var match$24 = value$1["measurements"];
          var field_measurements;
          if (match$24 !== undefined) {
            var match$25 = Js_json.decodeArray(match$24);
            field_measurements = match$25 !== undefined ? match$25.map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match !== undefined) {
                        return undefined;
                      } else {
                        var match$1 = Js_json.decodeObject(value);
                        var tmp;
                        if (match$1 !== undefined) {
                          var value$1 = Js_primitive.valFromOption(match$1);
                          var match$2 = value$1["id"];
                          var field_id;
                          if (match$2 !== undefined) {
                            var match$3 = Js_json.decodeString(match$2);
                            field_id = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                          } else {
                            field_id = Js_exn.raiseError("graphql_ppx: Field id on type Measurement is missing");
                          }
                          var match$4 = value$1["createdAt"];
                          var field_createdAt = match$4 !== undefined ? toMoment(match$4) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Measurement is missing");
                          var match$5 = value$1["relevantAt"];
                          var field_relevantAt;
                          if (match$5 !== undefined) {
                            var match$6 = Js_json.decodeNull(match$5);
                            field_relevantAt = toOptionalMoment(match$6 !== undefined ? undefined : Js_primitive.some(match$5));
                          } else {
                            field_relevantAt = Js_exn.raiseError("graphql_ppx: Field relevantAt on type Measurement is missing");
                          }
                          var match$7 = value$1["competitorType"];
                          var field_competitorType;
                          if (match$7 !== undefined) {
                            var match$8 = Js_json.decodeString(match$7);
                            if (match$8 !== undefined) {
                              var value$2 = match$8;
                              switch (value$2) {
                                case "AGGREGATION" : 
                                    field_competitorType = /* AGGREGATION */497422978;
                                    break;
                                case "COMPETITIVE" : 
                                    field_competitorType = /* COMPETITIVE */-288189265;
                                    break;
                                case "OBJECTIVE" : 
                                    field_competitorType = /* OBJECTIVE */1055622745;
                                    break;
                                default:
                                  field_competitorType = Js_exn.raiseError("graphql_ppx: Unknown enum variant for competitorType: " + value$2);
                              }
                            } else {
                              field_competitorType = Js_exn.raiseError("graphql_ppx: Expected enum value for competitorType, got " + JSON.stringify(match$7));
                            }
                          } else {
                            field_competitorType = Js_exn.raiseError("graphql_ppx: Field competitorType on type Measurement is missing");
                          }
                          var match$9 = value$1["taggedMeasurementId"];
                          var field_taggedMeasurementId;
                          if (match$9 !== undefined) {
                            var match$10 = Js_json.decodeNull(match$9);
                            if (match$10 !== undefined) {
                              field_taggedMeasurementId = undefined;
                            } else {
                              var match$11 = Js_json.decodeString(match$9);
                              field_taggedMeasurementId = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$9));
                            }
                          } else {
                            field_taggedMeasurementId = undefined;
                          }
                          var match$12 = value$1["measurable"];
                          var field_measurable;
                          if (match$12 !== undefined) {
                            var match$13 = Js_json.decodeNull(match$12);
                            if (match$13 !== undefined) {
                              field_measurable = undefined;
                            } else {
                              var match$14 = Js_json.decodeObject(match$12);
                              var tmp$1;
                              if (match$14 !== undefined) {
                                var value$3 = Js_primitive.valFromOption(match$14);
                                var match$15 = value$3["id"];
                                var field_id$1;
                                if (match$15 !== undefined) {
                                  var match$16 = Js_json.decodeString(match$15);
                                  field_id$1 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$15));
                                } else {
                                  field_id$1 = Js_exn.raiseError("graphql_ppx: Field id on type Measurable is missing");
                                }
                                var match$17 = value$3["name"];
                                var field_name;
                                if (match$17 !== undefined) {
                                  var match$18 = Js_json.decodeString(match$17);
                                  field_name = match$18 !== undefined ? match$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$17));
                                } else {
                                  field_name = Js_exn.raiseError("graphql_ppx: Field name on type Measurable is missing");
                                }
                                var match$19 = value$3["isLocked"];
                                var field_isLocked;
                                if (match$19 !== undefined) {
                                  var match$20 = Js_json.decodeBoolean(match$19);
                                  field_isLocked = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(match$19));
                                } else {
                                  field_isLocked = Js_exn.raiseError("graphql_ppx: Field isLocked on type Measurable is missing");
                                }
                                tmp$1 = /* record */[
                                  /* id */field_id$1,
                                  /* name */field_name,
                                  /* isLocked */field_isLocked
                                ];
                              } else {
                                tmp$1 = Js_exn.raiseError("graphql_ppx: Expected object of type Measurable, got " + JSON.stringify(match$12));
                              }
                              field_measurable = tmp$1;
                            }
                          } else {
                            field_measurable = undefined;
                          }
                          tmp = /* record */[
                            /* id */field_id,
                            /* relevantAt */field_relevantAt,
                            /* competitorType */field_competitorType,
                            /* createdAt */field_createdAt,
                            /* taggedMeasurementId */field_taggedMeasurementId,
                            /* measurable */field_measurable
                          ];
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Measurement, got " + JSON.stringify(value));
                        }
                        return tmp;
                      }
                    })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$24));
          } else {
            field_measurements = Js_exn.raiseError("graphql_ppx: Field measurements on type Agent is missing");
          }
          tmp$1 = /* record */[
            /* user */field_user,
            /* bot */field_bot,
            /* measurements */field_measurements
          ];
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Expected object of type Agent, got " + JSON.stringify(match$1));
        }
        tmp = tmp$1;
      }
    } else {
      tmp = undefined;
    }
    return {
            agent: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetAgent = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetAgentQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

exports.toMoment = toMoment;
exports.toOptionalMoment = toOptionalMoment;
exports.GetAgent = GetAgent;
exports.GetAgentQuery = GetAgentQuery;
/* GetAgentQuery Not a pure module */
