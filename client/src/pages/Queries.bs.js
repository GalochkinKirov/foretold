// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Option$Rationale = require("rationale/src/Option.js");

var ppx_printed_query = "query getUser($id: String!)  {\nuser: user(id: $id)  {\nid  \nname  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["user"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var value$1 = match$3[0];
          var match$4 = value$1["id"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeString(match$4);
            tmp$2 = match$5 ? match$5[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
          }
          var match$6 = value$1["name"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeString(match$6);
            tmp$3 = match$7 ? match$7[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      tmp = /* None */0;
    }
    return {
            user: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetUser = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetUserQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var ppx_printed_query$1 = "query getUsers  {\nusers  {\nid  \nname  \ncreatedAt  \nupdatedAt  \n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["users"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 ? match$2[0].map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match) {
                  return /* None */0;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1) {
                    var value$1 = match$1[0];
                    var match$2 = value$1["id"];
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var match$3 = Js_json.decodeString(match$2);
                      tmp$1 = match$3 ? match$3[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                    }
                    var match$4 = value$1["name"];
                    var tmp$2;
                    if (match$4 !== undefined) {
                      var match$5 = Js_json.decodeString(match$4);
                      tmp$2 = match$5 ? match$5[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                    }
                    var match$6 = value$1["createdAt"];
                    var match$7 = value$1["updatedAt"];
                    tmp = {
                      id: tmp$1,
                      name: tmp$2,
                      createdAt: match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Field createdAt on type User is missing"),
                      updatedAt: match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Field updatedAt on type User is missing")
                    };
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                  }
                  return /* Some */[tmp];
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field users on type Query is missing");
    }
    return {
            users: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1() {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function makeWithVariables$1() {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function ret_type$1() {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var GetUsers = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var GetUsersQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$1,
      parse$1
    ]);

function jsonToString(e) {
  return Option$Rationale.$$default("", Js_json.decodeString(e));
}

var ppx_printed_query$2 = "query getMeasurables  {\nmeasurables  {\nid  \nname  \ncreatedAt  \nupdatedAt  \n}\n\n}\n";

function parse$2(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["measurables"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 ? match$2[0].map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match) {
                  return /* None */0;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1) {
                    var value$1 = match$1[0];
                    var match$2 = value$1["id"];
                    var field_id;
                    if (match$2 !== undefined) {
                      var match$3 = Js_json.decodeString(match$2);
                      field_id = match$3 ? match$3[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                    } else {
                      field_id = Js_exn.raiseError("graphql_ppx: Field id on type Measurable is missing");
                    }
                    var match$4 = value$1["name"];
                    var field_name;
                    if (match$4 !== undefined) {
                      var match$5 = Js_json.decodeString(match$4);
                      field_name = match$5 ? match$5[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                    } else {
                      field_name = Js_exn.raiseError("graphql_ppx: Field name on type Measurable is missing");
                    }
                    var match$6 = value$1["createdAt"];
                    var field_createdAt = match$6 !== undefined ? Option$Rationale.$$default("", Js_json.decodeString(match$6)) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Measurable is missing");
                    var match$7 = value$1["updatedAt"];
                    var field_updatedAt = match$7 !== undefined ? Option$Rationale.$$default("", Js_json.decodeString(match$7)) : Js_exn.raiseError("graphql_ppx: Field updatedAt on type Measurable is missing");
                    tmp = /* record */[
                      /* id */field_id,
                      /* name */field_name,
                      /* createdAt */field_createdAt,
                      /* updatedAt */field_updatedAt
                    ];
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Measurable, got " + JSON.stringify(value));
                  }
                  return /* Some */[tmp];
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field measurables on type Query is missing");
    }
    return {
            measurables: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$2() {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeWithVariables$2() {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function ret_type$2() {
  return /* module */[];
}

var MT_Ret$2 = /* module */[];

var GetMeasurables = /* module */[
  /* ppx_printed_query */ppx_printed_query$2,
  /* query */ppx_printed_query$2,
  /* parse */parse$2,
  /* make */make$2,
  /* makeWithVariables */makeWithVariables$2,
  /* ret_type */ret_type$2,
  /* MT_Ret */MT_Ret$2
];

var GetMeasurablesQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$2,
      parse$2
    ]);

exports.GetUser = GetUser;
exports.GetUserQuery = GetUserQuery;
exports.GetUsers = GetUsers;
exports.GetUsersQuery = GetUsersQuery;
exports.jsonToString = jsonToString;
exports.GetMeasurables = GetMeasurables;
exports.GetMeasurablesQuery = GetMeasurablesQuery;
/* GetUserQuery Not a pure module */
