// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Option$Rationale = require("rationale/src/Option.js");

var ppx_printed_query = "query getUser($id: String!)  {\nuser: user(id: $id)  {\nid  \nname  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["user"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Js_primitive.valFromOption(match$3);
          var match$4 = value$1["id"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeString(match$4);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
          }
          var match$6 = value$1["name"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeString(match$6);
            tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Js_primitive.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            user: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetUser = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetUserQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var ppx_printed_query$1 = "query getUsers  {\nusers  {\nid  \nname  \ncreatedAt  \nupdatedAt  \n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["users"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return undefined;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$1 = Js_primitive.valFromOption(match$1);
                    var match$2 = value$1["id"];
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var match$3 = Js_json.decodeString(match$2);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                    }
                    var match$4 = value$1["name"];
                    var tmp$2;
                    if (match$4 !== undefined) {
                      var match$5 = Js_json.decodeString(match$4);
                      tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                    }
                    var match$6 = value$1["createdAt"];
                    var match$7 = value$1["updatedAt"];
                    tmp = {
                      id: tmp$1,
                      name: tmp$2,
                      createdAt: match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Field createdAt on type User is missing"),
                      updatedAt: match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Field updatedAt on type User is missing")
                    };
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                  }
                  return Js_primitive.some(tmp);
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field users on type Query is missing");
    }
    return {
            users: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1() {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function makeWithVariables$1() {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function ret_type$1() {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var GetUsers = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var GetUsersQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$1,
      parse$1
    ]);

function stringOfcompetitorType(e) {
  if (e !== 497422978) {
    if (e >= 1055622745) {
      return "Objective";
    } else {
      return "Competitive";
    }
  } else {
    return "Aggregation";
  }
}

var ppx_printed_query$2 = "query getAgents  {\nagents  {\nuser: User  {\nid  \nname  \n}\n\nbot: Bot  {\nid  \nname  \ndescription  \ncompetitorType  \n}\n\n}\n\n}\n";

function parse$2(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["agents"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return undefined;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$1 = Js_primitive.valFromOption(match$1);
                    var match$2 = value$1["user"];
                    var field_user;
                    if (match$2 !== undefined) {
                      var match$3 = Js_json.decodeNull(match$2);
                      if (match$3 !== undefined) {
                        field_user = undefined;
                      } else {
                        var match$4 = Js_json.decodeObject(match$2);
                        var tmp$1;
                        if (match$4 !== undefined) {
                          var value$2 = Js_primitive.valFromOption(match$4);
                          var match$5 = value$2["id"];
                          var field_id;
                          if (match$5 !== undefined) {
                            var match$6 = Js_json.decodeString(match$5);
                            field_id = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$5));
                          } else {
                            field_id = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                          }
                          var match$7 = value$2["name"];
                          var field_name;
                          if (match$7 !== undefined) {
                            var match$8 = Js_json.decodeString(match$7);
                            field_name = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$7));
                          } else {
                            field_name = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                          }
                          tmp$1 = /* record */[
                            /* id */field_id,
                            /* name */field_name
                          ];
                        } else {
                          tmp$1 = Js_exn.raiseError("graphql_ppx: Expected object of type User, got " + JSON.stringify(match$2));
                        }
                        field_user = tmp$1;
                      }
                    } else {
                      field_user = undefined;
                    }
                    var match$9 = value$1["bot"];
                    var field_bot;
                    if (match$9 !== undefined) {
                      var match$10 = Js_json.decodeNull(match$9);
                      if (match$10 !== undefined) {
                        field_bot = undefined;
                      } else {
                        var match$11 = Js_json.decodeObject(match$9);
                        var tmp$2;
                        if (match$11 !== undefined) {
                          var value$3 = Js_primitive.valFromOption(match$11);
                          var match$12 = value$3["id"];
                          var field_id$1;
                          if (match$12 !== undefined) {
                            var match$13 = Js_json.decodeString(match$12);
                            field_id$1 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$12));
                          } else {
                            field_id$1 = Js_exn.raiseError("graphql_ppx: Field id on type Bot is missing");
                          }
                          var match$14 = value$3["name"];
                          var field_name$1;
                          if (match$14 !== undefined) {
                            var match$15 = Js_json.decodeNull(match$14);
                            if (match$15 !== undefined) {
                              field_name$1 = undefined;
                            } else {
                              var match$16 = Js_json.decodeString(match$14);
                              field_name$1 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$14));
                            }
                          } else {
                            field_name$1 = undefined;
                          }
                          var match$17 = value$3["description"];
                          var field_description;
                          if (match$17 !== undefined) {
                            var match$18 = Js_json.decodeNull(match$17);
                            if (match$18 !== undefined) {
                              field_description = undefined;
                            } else {
                              var match$19 = Js_json.decodeString(match$17);
                              field_description = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$17));
                            }
                          } else {
                            field_description = undefined;
                          }
                          var match$20 = value$3["competitorType"];
                          var field_competitorType;
                          if (match$20 !== undefined) {
                            var match$21 = Js_json.decodeString(match$20);
                            if (match$21 !== undefined) {
                              var value$4 = match$21;
                              switch (value$4) {
                                case "AGGREGATION" : 
                                    field_competitorType = /* AGGREGATION */497422978;
                                    break;
                                case "COMPETITIVE" : 
                                    field_competitorType = /* COMPETITIVE */-288189265;
                                    break;
                                case "OBJECTIVE" : 
                                    field_competitorType = /* OBJECTIVE */1055622745;
                                    break;
                                default:
                                  field_competitorType = Js_exn.raiseError("graphql_ppx: Unknown enum variant for competitorType: " + value$4);
                              }
                            } else {
                              field_competitorType = Js_exn.raiseError("graphql_ppx: Expected enum value for competitorType, got " + JSON.stringify(match$20));
                            }
                          } else {
                            field_competitorType = Js_exn.raiseError("graphql_ppx: Field competitorType on type Bot is missing");
                          }
                          tmp$2 = /* record */[
                            /* competitorType */field_competitorType,
                            /* description */field_description,
                            /* id */field_id$1,
                            /* name */field_name$1
                          ];
                        } else {
                          tmp$2 = Js_exn.raiseError("graphql_ppx: Expected object of type Bot, got " + JSON.stringify(match$9));
                        }
                        field_bot = tmp$2;
                      }
                    } else {
                      field_bot = undefined;
                    }
                    tmp = /* record */[
                      /* bot */field_bot,
                      /* user */field_user
                    ];
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Agent, got " + JSON.stringify(value));
                  }
                  return tmp;
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field agents on type Query is missing");
    }
    return {
            agents: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$2() {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeWithVariables$2() {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function ret_type$2() {
  return /* module */[];
}

var MT_Ret$2 = /* module */[];

var GetAgents = /* module */[
  /* ppx_printed_query */ppx_printed_query$2,
  /* query */ppx_printed_query$2,
  /* parse */parse$2,
  /* make */make$2,
  /* makeWithVariables */makeWithVariables$2,
  /* ret_type */ret_type$2,
  /* MT_Ret */MT_Ret$2
];

var GetAgentsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$2,
      parse$2
    ]);

function jsonToString(e) {
  return Option$Rationale.$$default("", Js_json.decodeString(e));
}

var ppx_printed_query$3 = "query getMeasurables  {\nmeasurables  {\nid  \nname  \ncreatedAt  \nupdatedAt  \n}\n\n}\n";

function parse$3(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["measurables"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return undefined;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$1 = Js_primitive.valFromOption(match$1);
                    var match$2 = value$1["id"];
                    var field_id;
                    if (match$2 !== undefined) {
                      var match$3 = Js_json.decodeString(match$2);
                      field_id = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                    } else {
                      field_id = Js_exn.raiseError("graphql_ppx: Field id on type Measurable is missing");
                    }
                    var match$4 = value$1["name"];
                    var field_name;
                    if (match$4 !== undefined) {
                      var match$5 = Js_json.decodeString(match$4);
                      field_name = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                    } else {
                      field_name = Js_exn.raiseError("graphql_ppx: Field name on type Measurable is missing");
                    }
                    var match$6 = value$1["createdAt"];
                    var field_createdAt = match$6 !== undefined ? Option$Rationale.$$default("", Js_json.decodeString(match$6)) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Measurable is missing");
                    var match$7 = value$1["updatedAt"];
                    var field_updatedAt = match$7 !== undefined ? Option$Rationale.$$default("", Js_json.decodeString(match$7)) : Js_exn.raiseError("graphql_ppx: Field updatedAt on type Measurable is missing");
                    tmp = /* record */[
                      /* id */field_id,
                      /* name */field_name,
                      /* createdAt */field_createdAt,
                      /* updatedAt */field_updatedAt
                    ];
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Measurable, got " + JSON.stringify(value));
                  }
                  return tmp;
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field measurables on type Query is missing");
    }
    return {
            measurables: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$3() {
  return {
          query: ppx_printed_query$3,
          variables: null,
          parse: parse$3
        };
}

function makeWithVariables$3() {
  return {
          query: ppx_printed_query$3,
          variables: null,
          parse: parse$3
        };
}

function ret_type$3() {
  return /* module */[];
}

var MT_Ret$3 = /* module */[];

var GetMeasurables = /* module */[
  /* ppx_printed_query */ppx_printed_query$3,
  /* query */ppx_printed_query$3,
  /* parse */parse$3,
  /* make */make$3,
  /* makeWithVariables */makeWithVariables$3,
  /* ret_type */ret_type$3,
  /* MT_Ret */MT_Ret$3
];

var GetMeasurablesQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$3,
      parse$3
    ]);

exports.GetUser = GetUser;
exports.GetUserQuery = GetUserQuery;
exports.GetUsers = GetUsers;
exports.GetUsersQuery = GetUsersQuery;
exports.stringOfcompetitorType = stringOfcompetitorType;
exports.GetAgents = GetAgents;
exports.GetAgentsQuery = GetAgentsQuery;
exports.jsonToString = jsonToString;
exports.GetMeasurables = GetMeasurables;
exports.GetMeasurablesQuery = GetMeasurablesQuery;
/* GetUserQuery Not a pure module */
