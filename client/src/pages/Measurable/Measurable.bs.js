// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var MomentRe = require("bs-moment/src/MomentRe.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Result$Rationale = require("rationale/src/Result.js");
var Function$Rationale = require("rationale/src/Function.js");
var Utils$ReactTemplate = require("../../utils/Utils.bs.js");
var Header$ReactTemplate = require("../../Header.bs.js");
var Queries$ReactTemplate = require("../Queries.bs.js");
var MeasurableChart$ReactTemplate = require("./MeasurableChart.bs.js");
var MeasurableTable$ReactTemplate = require("./MeasurableTable.bs.js");

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function toMoment(param) {
  return partial_arg(Queries$ReactTemplate.jsonToString, (function (eta) {
                return MomentRe.moment(/* None */0, eta);
              }), param);
}

var ppx_printed_query = "query getMeasurable($id: String!)  {\nmeasurable: measurable(id: $id)  {\nid  \nname  \ncreatedAt  \nmeasurements: Measurements  {\npercentile25  \npercentile50  \npercentile75  \ncreatedAt  \nagent: Agent  {\nid  \ntype  \nuser: User  {\nid  \nname  \n}\n\nbot: Bot  {\nid  \nname  \n}\n\n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["measurable"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var value$1 = match$3[0];
          var match$4 = value$1["id"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeString(match$4);
            tmp$2 = match$5 ? match$5[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Measurable is missing");
          }
          var match$6 = value$1["name"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeString(match$6);
            tmp$3 = match$7 ? match$7[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Measurable is missing");
          }
          var match$8 = value$1["createdAt"];
          var match$9 = value$1["measurements"];
          var tmp$4;
          if (match$9 !== undefined) {
            var match$10 = Js_json.decodeArray(match$9);
            tmp$4 = match$10 ? match$10[0].map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match) {
                        return /* None */0;
                      } else {
                        var match$1 = Js_json.decodeObject(value);
                        var tmp;
                        if (match$1) {
                          var value$1 = match$1[0];
                          var match$2 = value$1["percentile25"];
                          var tmp$1;
                          if (match$2 !== undefined) {
                            var match$3 = Js_json.decodeNumber(match$2);
                            tmp$1 = (
                                match$3 ? match$3[0] : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(match$2))
                              ).toString();
                          } else {
                            tmp$1 = Js_exn.raiseError("graphql_ppx: Field percentile25 on type Measurement is missing");
                          }
                          var match$4 = value$1["percentile50"];
                          var tmp$2;
                          if (match$4 !== undefined) {
                            var match$5 = Js_json.decodeNumber(match$4);
                            tmp$2 = (
                                match$5 ? match$5[0] : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(match$4))
                              ).toString();
                          } else {
                            tmp$2 = Js_exn.raiseError("graphql_ppx: Field percentile50 on type Measurement is missing");
                          }
                          var match$6 = value$1["percentile75"];
                          var tmp$3;
                          if (match$6 !== undefined) {
                            var match$7 = Js_json.decodeNumber(match$6);
                            tmp$3 = (
                                match$7 ? match$7[0] : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(match$6))
                              ).toString();
                          } else {
                            tmp$3 = Js_exn.raiseError("graphql_ppx: Field percentile75 on type Measurement is missing");
                          }
                          var match$8 = value$1["createdAt"];
                          var match$9 = value$1["agent"];
                          var tmp$4;
                          if (match$9 !== undefined) {
                            var match$10 = Js_json.decodeNull(match$9);
                            if (match$10) {
                              tmp$4 = /* None */0;
                            } else {
                              var match$11 = Js_json.decodeObject(match$9);
                              var tmp$5;
                              if (match$11) {
                                var value$2 = match$11[0];
                                var match$12 = value$2["id"];
                                var tmp$6;
                                if (match$12 !== undefined) {
                                  var match$13 = Js_json.decodeString(match$12);
                                  tmp$6 = match$13 ? match$13[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$12));
                                } else {
                                  tmp$6 = Js_exn.raiseError("graphql_ppx: Field id on type Agent is missing");
                                }
                                var match$14 = value$2["type"];
                                var tmp$7;
                                if (match$14 !== undefined) {
                                  var match$15 = Js_json.decodeString(match$14);
                                  if (match$15) {
                                    var value$3 = match$15[0];
                                    switch (value$3) {
                                      case "BOT" : 
                                          tmp$7 = /* BOT */3299815;
                                          break;
                                      case "USER" : 
                                          tmp$7 = /* USER */946756171;
                                          break;
                                      default:
                                        tmp$7 = Js_exn.raiseError("graphql_ppx: Unknown enum variant for AgenttypeEnumType: " + value$3);
                                    }
                                  } else {
                                    tmp$7 = Js_exn.raiseError("graphql_ppx: Expected enum value for AgenttypeEnumType, got " + JSON.stringify(match$14));
                                  }
                                } else {
                                  tmp$7 = Js_exn.raiseError("graphql_ppx: Field type on type Agent is missing");
                                }
                                var match$16 = value$2["user"];
                                var tmp$8;
                                if (match$16 !== undefined) {
                                  var match$17 = Js_json.decodeNull(match$16);
                                  if (match$17) {
                                    tmp$8 = /* None */0;
                                  } else {
                                    var match$18 = Js_json.decodeObject(match$16);
                                    var tmp$9;
                                    if (match$18) {
                                      var value$4 = match$18[0];
                                      var match$19 = value$4["id"];
                                      var tmp$10;
                                      if (match$19 !== undefined) {
                                        var match$20 = Js_json.decodeString(match$19);
                                        tmp$10 = match$20 ? match$20[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$19));
                                      } else {
                                        tmp$10 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                                      }
                                      var match$21 = value$4["name"];
                                      var tmp$11;
                                      if (match$21 !== undefined) {
                                        var match$22 = Js_json.decodeString(match$21);
                                        tmp$11 = match$22 ? match$22[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$21));
                                      } else {
                                        tmp$11 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                                      }
                                      tmp$9 = {
                                        id: tmp$10,
                                        name: tmp$11
                                      };
                                    } else {
                                      tmp$9 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                    }
                                    tmp$8 = /* Some */[tmp$9];
                                  }
                                } else {
                                  tmp$8 = /* None */0;
                                }
                                var match$23 = value$2["bot"];
                                var tmp$12;
                                if (match$23 !== undefined) {
                                  var match$24 = Js_json.decodeNull(match$23);
                                  if (match$24) {
                                    tmp$12 = /* None */0;
                                  } else {
                                    var match$25 = Js_json.decodeObject(match$23);
                                    var tmp$13;
                                    if (match$25) {
                                      var value$5 = match$25[0];
                                      var match$26 = value$5["id"];
                                      var tmp$14;
                                      if (match$26 !== undefined) {
                                        var match$27 = Js_json.decodeString(match$26);
                                        tmp$14 = match$27 ? match$27[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$26));
                                      } else {
                                        tmp$14 = Js_exn.raiseError("graphql_ppx: Field id on type Bot is missing");
                                      }
                                      var match$28 = value$5["name"];
                                      var tmp$15;
                                      if (match$28 !== undefined) {
                                        var match$29 = Js_json.decodeNull(match$28);
                                        if (match$29) {
                                          tmp$15 = /* None */0;
                                        } else {
                                          var match$30 = Js_json.decodeString(match$28);
                                          tmp$15 = /* Some */[match$30 ? match$30[0] : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$28))];
                                        }
                                      } else {
                                        tmp$15 = /* None */0;
                                      }
                                      tmp$13 = {
                                        id: tmp$14,
                                        name: tmp$15
                                      };
                                    } else {
                                      tmp$13 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                    }
                                    tmp$12 = /* Some */[tmp$13];
                                  }
                                } else {
                                  tmp$12 = /* None */0;
                                }
                                tmp$5 = {
                                  id: tmp$6,
                                  type: tmp$7,
                                  user: tmp$8,
                                  bot: tmp$12
                                };
                              } else {
                                tmp$5 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$4 = /* Some */[tmp$5];
                            }
                          } else {
                            tmp$4 = /* None */0;
                          }
                          tmp = {
                            percentile25: tmp$1,
                            percentile50: tmp$2,
                            percentile75: tmp$3,
                            createdAt: match$8 !== undefined ? toMoment(match$8) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Measurement is missing"),
                            agent: tmp$4
                          };
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                        }
                        return /* Some */[tmp];
                      }
                    })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$9));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field measurements on type Measurable is missing");
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            createdAt: match$8 !== undefined ? toMoment(match$8) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Measurable is missing"),
            measurements: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      tmp = /* None */0;
    }
    return {
            measurable: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetMeasurable = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetMeasurableQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("Measurable");

function make$1(id, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var query = make(id, /* () */0);
              var eta = Curry.app(GetMeasurableQuery[/* make */3], [
                    /* Some */[query.variables],
                    /* Some */[5000],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    (function (param) {
                        return Result$Rationale.result(Utils$ReactTemplate.idd, Utils$ReactTemplate.idd, Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* >>= */0], Utils$ReactTemplate.apolloResponseToResult(param[/* result */0]), (function (e) {
                                              return Utils$ReactTemplate.filterOptionalResult(Utils$ReactTemplate.ste("Measurable not found"), e.measurable);
                                            })), (function (e) {
                                          return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, MeasurableChart$ReactTemplate.make(e.measurements, /* array */[])), ReasonReact.element(/* None */0, /* None */0, MeasurableTable$ReactTemplate.make(e.measurements, /* array */[])));
                                        })));
                      })
                  ]);
              return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Header$ReactTemplate.make(/* array */[])), React.createElement("h2", undefined, "Measurable Page"), ReasonReact.element(/* None */0, /* None */0, eta));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.toMoment = toMoment;
exports.GetMeasurable = GetMeasurable;
exports.GetMeasurableQuery = GetMeasurableQuery;
exports.component = component;
exports.make = make$1;
/* GetMeasurableQuery Not a pure module */
