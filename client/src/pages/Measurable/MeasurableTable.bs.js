// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$Client = require("../../utils/Utils.bs.js");
var Value$Shared = require("shared/src/Value/Value.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var HandsOnTable$Client = require("../../utils/HandsOnTable.bs.js");
var UseRouterForLinks$Client = require("../../utils/UseRouterForLinks.bs.js");

var component = ReasonReact.statelessComponent("MeasurableTable");

function toUnix(x) {
  return x.createdAt.unix();
}

function make(measurements, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var data = $$Array.map((function (e) {
                      var link = function (agent) {
                        var match = Curry._2(Option$Rationale.$less$$great, agent, (function (x) {
                                return x.id;
                              }));
                        var match$1 = Curry._2(Option$Rationale.$great$great$eq, Curry._2(Option$Rationale.$great$great$eq, agent, (function (x) {
                                    return x.bot;
                                  })), (function (x) {
                                return x.name;
                              }));
                        var match$2 = Curry._2(Option$Rationale.$less$$great, Curry._2(Option$Rationale.$great$great$eq, agent, (function (x) {
                                    return x.user;
                                  })), (function (x) {
                                return x.name;
                              }));
                        if (match !== undefined) {
                          if (match$1 !== undefined) {
                            return "<a href=\"/agents/" + (String(match) + ("\">" + (String(match$1) + "</a>")));
                          } else if (match$2 !== undefined) {
                            return "<a href=\"/agents/" + (String(match) + ("\">" + (String(match$2) + "</a>")));
                          } else {
                            return "";
                          }
                        } else {
                          return "";
                        }
                      };
                      var agentType = Curry._2(Option$Rationale.$less$$great, Curry._2(Option$Rationale.$great$great$eq, e.agent, (function (x) {
                                  return x.bot;
                                })), (function (x) {
                              return x.competitorType;
                            }));
                      var botType = function (e) {
                        if (e !== undefined) {
                          var match = e;
                          if (match !== -288189265) {
                            if (match !== 497422978) {
                              if (match !== 1055622745) {
                                return "";
                              } else {
                                return "Objective";
                              }
                            } else {
                              return "Aggregation";
                            }
                          } else {
                            return "Competitive";
                          }
                        } else {
                          return "";
                        }
                      };
                      var botCompetitor = function (e) {
                        if (e !== 497422978) {
                          if (e >= 1055622745) {
                            return "Objective";
                          } else {
                            return "Competitive";
                          }
                        } else {
                          return "Aggregation";
                        }
                      };
                      var value = Belt_Result.mapWithDefault(e.value, "", Value$Shared.stringOfValue);
                      var presentableValueName = function (t) {
                        var variant = t[0];
                        if (variant >= -488794310) {
                          if (variant >= 564146209) {
                            if (variant >= 1061801627) {
                              return "Date Percentiles";
                            } else {
                              return "Binary";
                            }
                          } else if (variant >= 393953338) {
                            return "Percentiles";
                          } else {
                            return "Percentage";
                          }
                        } else if (variant >= -606499532) {
                          return "Point";
                        } else {
                          return "TimePoint";
                        }
                      };
                      var valueType = Belt_Result.mapWithDefault(e.value, "", presentableValueName);
                      return Js_dict.fromList(/* :: */[
                                  /* tuple */[
                                    "createdAt",
                                    e.relevantAt.format("L, h:mm:ss a")
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "competitive",
                                      botCompetitor(e.competitorType)
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "value",
                                        value
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "valueType",
                                          valueType
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "type",
                                            botType(agentType)
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "userLink",
                                              link(e.agent)
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]);
                    }), Utils$Client.catOptionals(measurements).sort((function (a, b) {
                          var match = b.createdAt.unix() > a.createdAt.unix();
                          if (match) {
                            return -1;
                          } else {
                            return 1;
                          }
                        })));
              var columns = /* array */[
                HandsOnTable$Client.makeColumn("createdAt", undefined, undefined, /* () */0),
                HandsOnTable$Client.makeColumn("competitive", undefined, undefined, /* () */0),
                HandsOnTable$Client.makeColumn("value", undefined, undefined, /* () */0),
                HandsOnTable$Client.makeColumn("valueType", undefined, undefined, /* () */0),
                HandsOnTable$Client.makeColumn("type", undefined, undefined, /* () */0),
                HandsOnTable$Client.makeColumn("userLink", "html", undefined, /* () */0)
              ];
              var colHeaders = /* array */[
                "Relevant at",
                "competitive",
                "Value",
                "Value Type",
                "Bot Type",
                "Agent"
              ];
              return ReasonReact.element(undefined, undefined, UseRouterForLinks$Client.make(/* array */[ReasonReact.element(undefined, undefined, HandsOnTable$Client.make(data, columns, colHeaders, /* array */[]))]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.toUnix = toUnix;
exports.make = make;
/* component Not a pure module */
