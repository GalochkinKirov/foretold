// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$Client = require("../../utils/Utils.bs.js");
var Queries$Client = require("../Queries.bs.js");
var Result$Rationale = require("rationale/src/Result.js");

function toMeasurableLink(m) {
  var id = m[/* id */0];
  var name = m[/* name */1];
  return React.createElement("a", {
              href: "/measurables/" + id
            }, Utils$Client.ste(name));
}

var borderColor = Css.hex("aaaaaa");

function item(isSelected) {
  return Css.style(/* :: */[
              Css.color(Css.black),
              /* :: */[
                Css.cursor(/* pointer */-786317123),
                /* :: */[
                  Css.backgroundColor(isSelected ? Css.hex("a2cdfb") : Css.white),
                  /* :: */[
                    Css.width(/* `percent */[
                          -119887163,
                          100.0
                        ]),
                    /* :: */[
                      Css.padding2(Css.px(10), Css.px(10)),
                      /* :: */[
                        Css.borderBottom(Css.px(1), Css.solid, borderColor),
                        /* :: */[
                          Css.minHeight(Css.px(50)),
                          /* :: */[
                            Css.firstChild(/* :: */[
                                  Css.borderTop(Css.px(1), Css.solid, borderColor),
                                  /* [] */0
                                ]),
                            /* :: */[
                              Css.hover(/* :: */[
                                    Css.backgroundColor(Css.hex("dcedff")),
                                    /* [] */0
                                  ]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var body = Css.style(/* :: */[
      Css.marginLeft(Css.px(200)),
      /* [] */0
    ]);

var Styles = /* module */[
  /* borderColor */borderColor,
  /* item */item,
  /* body */body
];

function urlFn(e) {
  return "/measurables/" + e[/* id */0];
}

function showQueryList(data, selectedId) {
  return $$Array.mapi((function (index, e) {
                return React.createElement("div", {
                            key: String(index),
                            className: item(selectedId === e[/* id */0]),
                            onClick: (function () {
                                return ReasonReact.Router[/* push */0]("/measurables/" + e[/* id */0]);
                              })
                          }, Utils$Client.ste(e[/* name */1]));
              }), data);
}

var component = ReasonReact.statelessComponent("Measurables");

function make(selectedId, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var eta = Curry.app(Queries$Client.GetMeasurablesQuery[/* make */3], [
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    (function (o) {
                        return Result$Rationale.result(Utils$Client.idd, Utils$Client.idd, Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* <$> */1], Utils$Client.apolloResponseToResult(o[/* result */0]), (function (d) {
                                                  return d.measurables;
                                                })), Utils$Client.catOptionals), (function (e) {
                                          return React.createElement("div", undefined, showQueryList(e, selectedId));
                                        })));
                      })
                  ]);
              return ReasonReact.element(undefined, undefined, eta);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.toMeasurableLink = toMeasurableLink;
exports.Styles = Styles;
exports.urlFn = urlFn;
exports.showQueryList = showQueryList;
exports.component = component;
exports.make = make;
/* borderColor Not a pure module */
