// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$Client = require("../utils/Utils.bs.js");
var Queries$Client = require("./Queries.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var Result$Rationale = require("rationale/src/Result.js");
var HandsOnTable$Client = require("../utils/HandsOnTable.bs.js");
var UseRouterForLinks$Client = require("../utils/UseRouterForLinks.bs.js");

function toAgentLink(id, name) {
  return "<a href=\"/agents/" + (String(id) + ("\">" + (String(name) + "</a>")));
}

var component = ReasonReact.statelessComponent("Measurables");

function perEl(e) {
  var match = e[/* bot */1];
  if (match !== undefined) {
    var r = match;
    return Js_dict.fromList(/* :: */[
                /* tuple */[
                  "name",
                  toAgentLink(e[/* id */0], Option$Rationale.$$default("", r[/* name */3]))
                ],
                /* :: */[
                  /* tuple */[
                    "type",
                    "Bot"
                  ],
                  /* :: */[
                    /* tuple */[
                      "description",
                      Option$Rationale.$$default("", r[/* description */1])
                    ],
                    /* :: */[
                      /* tuple */[
                        "competitorType",
                        Queries$Client.stringOfcompetitorType(r[/* competitorType */0])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]);
  } else {
    var match$1 = e[/* user */2];
    if (match$1 !== undefined) {
      return Js_dict.fromList(/* :: */[
                  /* tuple */[
                    "name",
                    toAgentLink(e[/* id */0], match$1[/* name */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "type",
                      "User"
                    ],
                    /* :: */[
                      /* tuple */[
                        "competitorType",
                        "All"
                      ],
                      /* [] */0
                    ]
                  ]
                ]);
    } else {
      return Js_dict.fromList(/* [] */0);
    }
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var eta = Curry.app(Queries$Client.GetAgentsQuery[/* make */3], [
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    (function (param) {
                        return Result$Rationale.result(Utils$Client.idd, Utils$Client.idd, Curry._2(Result$Rationale.Infix[/* <$> */1], Curry._2(Result$Rationale.Infix[/* <$> */1], Utils$Client.apolloResponseToResult(param[/* result */0]), (function (d) {
                                              return d.agents;
                                            })), (function (e) {
                                          var data = $$Array.map(perEl, Utils$Client.catOptionals(e));
                                          var columns = /* array */[
                                            HandsOnTable$Client.makeColumn("name", "html", undefined, /* () */0),
                                            HandsOnTable$Client.makeColumn("type", undefined, undefined, /* () */0),
                                            HandsOnTable$Client.makeColumn("competitorType", undefined, undefined, /* () */0),
                                            HandsOnTable$Client.makeColumn("description", undefined, undefined, /* () */0)
                                          ];
                                          return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, UseRouterForLinks$Client.make(/* array */[ReasonReact.element(undefined, undefined, HandsOnTable$Client.make(data, columns, /* array */[
                                                                        "Name",
                                                                        "Type",
                                                                        "CompetitorType",
                                                                        "Description"
                                                                      ], /* array */[]))])));
                                        })));
                      })
                  ]);
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, eta));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.toAgentLink = toAgentLink;
exports.component = component;
exports.perEl = perEl;
exports.make = make;
/* component Not a pure module */
