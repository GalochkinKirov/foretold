// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Home$ReactTemplate = require("./pages/Home.bs.js");
var User$ReactTemplate = require("./pages/User.bs.js");
var Users$ReactTemplate = require("./pages/Users.bs.js");
var Measurable$ReactTemplate = require("./pages/Measurable/Measurable.bs.js");
var Measurables$ReactTemplate = require("./pages/Measurables.bs.js");

require('../node_modules/handsontable/dist/handsontable.full.css');
;

function reducer(action, _) {
  return /* Update */Block.__(0, [/* record */[/* route */action[0]]]);
}

function mapUrlToRoute(url) {
  var match = url[/* path */0];
  if (match) {
    switch (match[0]) {
      case "measurables" : 
          var match$1 = match[1];
          if (match$1) {
            if (match$1[1]) {
              return /* Home */0;
            } else {
              return /* Measurable */Block.__(1, [match$1[0]]);
            }
          } else {
            return /* Measurables */2;
          }
      case "users" : 
          var match$2 = match[1];
          if (match$2) {
            if (match$2[1]) {
              return /* Home */0;
            } else {
              return /* User */Block.__(0, [match$2[0]]);
            }
          } else {
            return /* Users */1;
          }
      default:
        return /* Home */0;
    }
  } else {
    return /* Home */0;
  }
}

function mapUrlToAction(url) {
  return /* ChangeRoute */[mapUrlToRoute(url)];
}

var component = ReasonReact.reducerComponent("App");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              Curry._1(self[/* send */3], /* ChangeRoute */[mapUrlToRoute(url)]);
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      return Curry._1(self[/* send */3], /* ChangeRoute */[mapUrlToRoute(url)]);
                    }));
              return Curry._1(self[/* onUnmount */4], (function () {
                            return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* route */0];
              if (typeof match === "number") {
                switch (match) {
                  case 0 : 
                  case 1 : 
                      return ReasonReact.element(/* None */0, /* None */0, Users$ReactTemplate.make(/* array */[]));
                  case 2 : 
                      return ReasonReact.element(/* None */0, /* None */0, Measurables$ReactTemplate.make(/* array */[]));
                  case 3 : 
                      return ReasonReact.element(/* None */0, /* None */0, Home$ReactTemplate.make(/* array */[]));
                  
                }
              } else if (match.tag) {
                return ReasonReact.element(/* None */0, /* None */0, Measurable$ReactTemplate.make(match[0], /* array */[]));
              } else {
                return ReasonReact.element(/* None */0, /* None */0, User$ReactTemplate.make(match[0], /* array */[]));
              }
            }),
          /* initialState */(function () {
              return /* record */[/* route : Home */0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.reducer = reducer;
exports.mapUrlToRoute = mapUrlToRoute;
exports.mapUrlToAction = mapUrlToAction;
exports.component = component;
exports.make = make;
/*  Not a pure module */
