{"version":3,"sources":["../src/index.js"],"names":["auth0","models","require","Sequelize","jwt","jwks","ApolloServer","gql","PORT","process","env","typeDefs","resolvers","Query","hello","server","schema","formatError","error","formatResponse","response","context","req","userAuth0Id","user","sub","getToken","headers","authorization","split","query","token","app","cors","use","secret","credentialsRequired","applyMiddleware","listen","port","console","log","graphqlPath"],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AACA;;;;AASA;;AACA;;;;;;AARA,MAAMC,SAASC,QAAQ,UAAR,CAAf;AACA,MAAMC,YAAYD,QAAQ,WAAR,CAAlB;;AAEA,MAAME,MAAMF,QAAQ,aAAR,CAAZ;AACA,IAAIG,OAAOH,QAAQ,UAAR,CAAX;AACA,MAAM,EAAEI,YAAF,EAAgBC,GAAhB,KAAwBL,QAAQ,uBAAR,CAA9B;;AAKA,MAAMM,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA,MAAMG,WAAWJ,GAAI;;;;CAArB;;AAMA;AACA,MAAMK,YAAY;AAChBC,SAAO;AACLC,WAAO,MAAM;AADR;AADS,CAAlB;;AAMA,MAAMC,SAAS,IAAIT,YAAJ,CAAiB;AAC9BU,wBAD8B;AAE9BC,eAAaC,SAAS;AACpB,WAAOA,KAAP;AACD,GAJ6B;AAK9BC,kBAAgBC,YAAY;AAC1B,WAAOA,QAAP;AACD,GAP6B;AAQ9BC,WAAS,CAAC,EAACC,GAAD,EAAD,KAAW;AAClB,WAAO,EAACC,aAAaD,IAAIE,IAAJ,IAAYF,IAAIE,IAAJ,CAASC,GAAnC,EAAP;AACH;AAV+B,CAAjB,CAAf;;AAcA,SAASC,QAAT,CAAkBJ,GAAlB,EAAuB;AACrB,MAAIA,IAAIK,OAAJ,CAAYC,aAAZ,IAA6BN,IAAIK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAA7E,EAAuF;AACnF,WAAOP,IAAIK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACH,GAFD,MAEO,IAAIP,IAAIQ,KAAJ,IAAaR,IAAIQ,KAAJ,CAAUC,KAA3B,EAAkC;AACvC,WAAOT,IAAIQ,KAAJ,CAAUC,KAAjB;AACD;AACD,SAAO,IAAP;AACD;AACD,MAAMC,MAAM,wBAAZ;AACA,IAAIC,OAAO/B,QAAQ,MAAR,CAAX;AACA8B,IAAIE,GAAJ,CAAQD,MAAR;AACAD,IAAIE,GAAJ,CAAQ9B,IAAI,EAAC+B,QAAQ,kEAAT,EAA6EC,qBAAqB,KAAlG,EAAyGV,QAAzG,EAAJ,CAAR;AACAX,OAAOsB,eAAP,CAAuB,EAAEL,GAAF,EAAvB;;AAEAA,IAAIM,MAAJ,CAAW,EAAEC,MAAM/B,IAAR,EAAX,EAA2B,MAAK;AAC9BgC,UAAQC,GAAR,CAAa,uCAAsCjC,IAAK,GAAEO,OAAO2B,WAAY,EAA7E;AACD,CAFD","file":"index.js","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport * as auth0 from \"auth0-js\";\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\n\nconst models = require(\"./models\")\nconst Sequelize = require('sequelize')\n\nconst jwt = require('express-jwt')\nvar jwks = require('jwks-rsa')\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nimport {schema} from './schema';\nimport { makeExecutableSchema } from 'graphql-tools';\n\nconst PORT = process.env.PORT || 4000;\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n \n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n  },\n};\n\nconst server = new ApolloServer({\n  schema,\n  formatError: error => {\n    return error;\n  },\n  formatResponse: response => {\n    return response;\n  },\n  context: ({req}) => {\n    return {userAuth0Id: req.user && req.user.sub}\n}\n});\n\n\nfunction getToken(req) {\n  if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n      return req.headers.authorization.split(' ')[1];\n  } else if (req.query && req.query.token) {\n    return req.query.token;\n  }\n  return null;\n}\nconst app = express();\nvar cors = require(\"cors\");\napp.use(cors());\napp.use(jwt({secret: \"bhz9XiFVqoowf_cSicdItfmExxWrAoeyhKEjGNQKjpX08E0NKuLNQ3uF5XL-wdy_\", credentialsRequired: false, getToken}))\nserver.applyMiddleware({ app });\n\napp.listen({ port: PORT }, () =>{\n  console.log(`ðŸš€ Server ready at http://localhost:${PORT}${server.graphqlPath}`)\n});"]}