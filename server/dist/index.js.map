{"version":3,"sources":["../src/index.js"],"names":["auth0","models","require","Sequelize","jwt","jwks","ApolloServer","gql","PORT","process","env","typeDefs","resolvers","Query","hello","getToken","req","headers","authorization","split","query","token","server","introspection","schema","formatError","error","console","log","formatResponse","response","context","user","Promise","resolve","verify","AUTH0_SECRET","err","result","ok","app","cors","use","applyMiddleware","sequelize","sync","then","listen","port","graphqlPath"],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AACA;;;;AASA;;AACA;;;;;;AARA,MAAMC,SAASC,QAAQ,UAAR,CAAf;AACA,MAAMC,YAAYD,QAAQ,WAAR,CAAlB;;AAEA,MAAME,MAAMF,QAAQ,cAAR,CAAZ;AACA,IAAIG,OAAOH,QAAQ,UAAR,CAAX;AACA,MAAM,EAAEI,YAAF,EAAgBC,GAAhB,KAAwBL,QAAQ,uBAAR,CAA9B;;AAKA,MAAMM,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA,MAAMG,WAAWJ,GAAI;;;;CAArB;;AAMA;AACA,MAAMK,YAAY;AAChBC,SAAO;AACLC,WAAO,MAAM;AADR;AADS,CAAlB;;AAMA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAIA,IAAIC,OAAJ,CAAYC,aAAZ,IAA6BF,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAA7E,EAAuF;AACnF,WAAOH,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACH,GAFD,MAEO,IAAIH,IAAII,KAAJ,IAAaJ,IAAII,KAAJ,CAAUC,KAA3B,EAAkC;AACvC,WAAOL,IAAII,KAAJ,CAAUC,KAAjB;AACD;AACD,SAAO,IAAP;AACD;;AAED,MAAMC,SAAS,IAAIhB,YAAJ,CAAiB;AAC9BiB,iBAAe,IADe;AAE9BC,wBAF8B;AAG9BC,eAAaC,SAAS;AACpBC,YAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,WAAOA,KAAP;AACD,GAN6B;AAO9BG,kBAAgBC,YAAY;AAC1B,WAAOA,QAAP;AACD,GAT6B;AAU9BC,WAAS,OAAO,EAACf,GAAD,EAAP,KAAiB;AACxB,UAAMK,QAAQN,SAASC,GAAT,CAAd;AACA,UAAMgB,OAAO,IAAIC,OAAJ,CAAYC,WACvB9B,IAAI+B,MAAJ,CAAWd,KAAX,EAAkBZ,QAAQC,GAAR,CAAY0B,YAA9B,EAA2C,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC1D,UAAID,GAAJ,EAAS;AACPH,gBAAQ;AACNK,cAAI,KADE;AAEND,kBAAQD;AAFF,SAAR;AAID,OALD,MAKO;AACLH,gBAAQ;AACNK,cAAI,IADE;AAEND;AAFM,SAAR;AAID;AACF,KAZD,CADW,CAAb;AAeA,WAAO,EAACN,IAAD,EAAP;AACD;AA5B6B,CAAjB,CAAf;;AAgCA,MAAMQ,MAAM,wBAAZ;AACA,IAAIC,OAAOvC,QAAQ,MAAR,CAAX;AACAsC,IAAIE,GAAJ,CAAQD,MAAR;AACAnB,OAAOqB,eAAP,CAAuB,EAAEH,GAAF,EAAvB;;AAEAvC,OAAO2C,SAAP,CAAiBC,IAAjB,GAAwBC,IAAxB,CAA6B,MAAM;AACjCN,MAAIO,MAAJ,CAAW,EAAEC,MAAMxC,IAAR,EAAX,EAA2B,MAAK;AAC9BmB,YAAQC,GAAR,CAAa,uCAAsCpB,IAAK,GAAEc,OAAO2B,WAAY,EAA7E;AACD,GAFD;AAGD,CAJD","file":"index.js","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport * as auth0 from \"auth0-js\";\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\n\nconst models = require(\"./models\")\nconst Sequelize = require('sequelize')\n\nconst jwt = require('jsonwebtoken')\nvar jwks = require('jwks-rsa')\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nimport {schema} from './schema';\nimport { makeExecutableSchema } from 'graphql-tools';\n\nconst PORT = process.env.PORT || 4000;\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n \n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n  },\n};\n\nfunction getToken(req) {\n  if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n      return req.headers.authorization.split(' ')[1];\n  } else if (req.query && req.query.token) {\n    return req.query.token;\n  }\n  return null;\n}\n\nconst server = new ApolloServer({\n  introspection: true,\n  schema,\n  formatError: error => {\n    console.log(\"Error!\", error);\n    return error;\n  },\n  formatResponse: response => {\n    return response;\n  },\n  context: async ({req}) => {\n    const token = getToken(req);\n    const user = new Promise(resolve =>\n      jwt.verify(token, process.env.AUTH0_SECRET,(err, result) => {\n        if (err) {\n          resolve({\n            ok: false,\n            result: err\n          });\n        } else {\n          resolve({\n            ok: true,\n            result\n          });\n        }\n      })\n    );\n    return {user}\n  }\n});\n\n\nconst app = express();\nvar cors = require(\"cors\");\napp.use(cors());\nserver.applyMiddleware({ app });\n\nmodels.sequelize.sync().then(() => {\n  app.listen({ port: PORT }, () =>{\n    console.log(`ðŸš€ Server ready at http://localhost:${PORT}${server.graphqlPath}`)\n  });\n})"]}