{"version":3,"sources":["../src/schema.js"],"names":["models","_","GraphQLJSON","Sequelize","require","jwt","AuthenticationError","capitalizeFirstLetter","str","charAt","toUpperCase","slice","maybePluralize","count","noun","suffix","generateReferences","model","all","associations","toArray","map","r","hasMany","associationType","toMany","otherTableName","target","tableName","type","getType","as","resolve","competitor","name","values","COMPETITIVE","value","AGGREGATION","OBJECTIVE","valueType","FLOAT","DATE","PERCENTAGE","filterr","fields","newFields","competitorType","makeObjectType","references","extraFields","description","assign","userType","User","measurableType","Measurable","measurementType","Measurement","botType","Bot","agentType","Agent","Users","Agents","Bots","Measurables","measurables","Measurements","simpleResolver","modelResolvers","plural","args","pick","auth0User","auth0Id","users","findAll","where","getAuth0Id","options","ok","result","user","Error","sub","userAuth0Id","schema","query","id","ops","_auth0Id","_auth0User","create","e","console","log","findById","mutation","createMeasurement","a","measurableId","newMeasurement","agentId","measurable","getMeasurable","createMeasurable","__","expectedResolutionDate","newMeasurable","creatorId","editUser","update"],"mappings":"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","file":"schema.js","sourcesContent":["import * as models from \"./models/index\";\nimport * as _ from \"lodash\";\nconst Sequelize = require('sequelize')\nconst jwt = require('express-jwt')\nconst { \n  AuthenticationError, \n} = require('apollo-server');\n\nimport {\n  makeAggregation\n} from \"./services/measurable/MakeAggregation\"\nimport {\n  resolver,\n  attributeFields\n} from \"graphql-sequelize\";\nimport {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLFloat,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLInputObjectType\n} from \"graphql\";\nimport * as GraphQLJSON from \"graphql-type-json\";\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst maybePluralize = (count, noun, suffix = 's') =>\n  `${noun}${count !== 1 ? suffix : ''}`;\n\nconst generateReferences = (model) => {\n  let all = {};\n  //Was trying to figure this bit out.\n  // const references = model.associations.\n  const associations = _.toArray(model.associations);\n  associations.map(r => {\n    const hasMany = r.associationType === \"HasMany\"\n    const toMany = r.associationType === \"BelongsToMany\"\n    const otherTableName = r.target.tableName\n    const type = getType[otherTableName]()\n    all[r.as] = {\n      type: hasMany ? GraphQLNonNull(new GraphQLList(type)) : type,\n      resolve: resolver(model[capitalizeFirstLetter(r.as)])\n    };\n    // console.log(model, r.as, otherTableName, type, model[r.as], model[capitalizeFirstLetter(r.as)])\n  });\n  return all;\n};\n\nlet competitor = GraphQLNonNull(new GraphQLEnumType({\n  name: 'competitorType',\n  values: {\n    COMPETITIVE: {value: \"COMPETITIVE\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    AGGREGATION: {value:  \"AGGREGATION\"},\n    OBJECTIVE: {value:  \"OBJECTIVE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nlet valueType = GraphQLNonNull(new GraphQLEnumType({\n  name: 'valueType',\n  values: {\n    FLOAT: {value: \"FLOAT\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    DATE: {value:  \"DATE\"},\n    PERCENTAGE: {value:  \"PERCENTAGE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nconst filterr = (fields) => {\n  let newFields = {...fields}\n  if (!!newFields.competitorType){\n    newFields.competitorType = {type: competitor}\n  }\n  if (!!newFields.valueType){\n    newFields.valueType = {type: valueType}\n  }\n  return newFields\n}\n\nconst makeObjectType = (model, references, extraFields = {}) =>\n  new GraphQLObjectType({\n    name: model.name,\n    description: model.name,\n    fields: () =>\n      _.assign(\n        filterr(attributeFields(model)),\n        generateReferences(model, references),\n        extraFields\n      )\n  });\n\nconst userType = makeObjectType(models.User);\nconst measurableType = makeObjectType(models.Measurable);\nconst measurementType = makeObjectType(models.Measurement);\nconst botType = makeObjectType(models.Bot);\nconst agentType = makeObjectType(models.Agent);\n\nconst getType = {\n  Users: () => userType,\n  Agents: () => agentType,\n  Bots: () => botType,\n  Measurables: () => measurableType,\n  measurables: () => measurableType,\n  Measurements: () => measurementType,\n}\n\nconst simpleResolver = (type, model) => ({\n  type: new GraphQLNonNull(GraphQLList(type)),\n  resolve: resolver(model)\n})\n\nconst modelResolvers = (name, plural, type, model) => {\n  let fields = {};\n  fields[name] = {\n    type: type,\n    args: _.pick(attributeFields(model), ['id']),\n    resolve: resolver(model)\n  };\n  fields[plural] = {\n    type: new GraphQLNonNull(GraphQLList(type)),\n    resolve: resolver(model)\n  }\n  return fields;\n}\n\nasync function auth0User(auth0Id){\n  let users = await models.User.findAll({\n    where: {\n      auth0Id: auth0Id,\n    }\n  })\n  return users && users[0]\n}\n\n//todo: clean up user login code.\n\nconst getAuth0Id = async (options) => {\n  let {ok, result} = await options.user;\n  if (!ok){\n    throw new Error(\n      result.name\n    );\n  }\n  let {sub} = result;\n  if (!sub){\n    throw new Error(\n      \"No User Id\"\n    );\n  }\n  let userAuth0Id = sub;\n  return userAuth0Id\n}\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      ...modelResolvers(\"user\", \"users\", getType.Users(), models.User),\n      user: {\n        type: getType.Users(),\n        args: {id: {type: GraphQLString}, auth0Id: {type: GraphQLString}},\n        resolve: async (ops, {\n          id,\n          auth0Id\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const _auth0User = await auth0User(_auth0Id);\n          let user;\n          if (_auth0Id && !_auth0User) {\n            try {\n            user = await models.User.create({auth0Id: _auth0Id, name: \"\"})\n            } catch (e) { console.log(\"E\", e)}\n          }\n          if (user){\n            return user;\n          } else if (id){\n            user = await models.User.findById(id);\n            return user\n          } else if (auth0Id){\n            const user = await auth0User(auth0Id)\n            return user;\n          }\n        }\n      },\n      ...modelResolvers(\"measurement\", \"measurements\", getType.Measurements(), models.Measurement),\n      ...modelResolvers(\"measurable\", \"measurables\", getType.Measurables(), models.Measurable),\n      ...modelResolvers(\"bot\", \"bots\", getType.Bots(), models.Bot),\n      ...modelResolvers(\"agent\", \"agents\", getType.Agents(), models.Agent),\n    }\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n      createMeasurement: {\n        type: getType.Measurements(),\n        args: filterr(_.pick(attributeFields(models.Measurement), ['value', 'competitorType', 'measurableId', 'agentId'])),\n        resolve: async (a, {\n          value,\n          competitorType,\n          measurableId,\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          const newMeasurement = await models.Measurement.create({\n            value,\n            competitorType,\n            measurableId,\n            agentId: user.agentId,\n          })\n          const measurable = await newMeasurement.getMeasurable();\n          return newMeasurement\n        }\n      },\n      createMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['name', 'description', 'valueType', 'expectedResolutionDate'])),\n        resolve: async (__, {\n          name,\n          description,\n          valueType,\n          expectedResolutionDate\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          const newMeasurable = await models.Measurable.create({\n          name,\n          valueType,\n          description,\n          expectedResolutionDate,\n          creatorId: user.agentId\n          })\n          return newMeasurable\n        }\n      },\n      editUser: {\n        type: getType.Users(),\n        args: filterr(_.pick(attributeFields(models.User), [\"id\", \"name\"])),\n        resolve: async (_, {\n          id,\n          name\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options);\n          let user = await models.User.findById(id);\n          if (user && (user.auth0Id == _auth0Id)) {\n            user.update({name})\n          }\n          return user\n        }\n      },\n    }\n    })\n});\n\nexport {\n  schema\n};\n"]}