{"version":3,"sources":["../src/schema.js"],"names":["models","_","GraphQLJSON","Sequelize","require","jwt","AuthenticationError","capitalizeFirstLetter","str","charAt","toUpperCase","slice","maybePluralize","count","noun","suffix","generateReferences","model","all","associations","toArray","map","r","hasMany","associationType","toMany","otherTableName","target","tableName","type","getType","as","GraphQLList","resolve","competitor","GraphQLEnumType","name","values","COMPETITIVE","value","AGGREGATION","OBJECTIVE","valueType","FLOAT","DATE","PERCENTAGE","filterr","fields","newFields","competitorType","makeObjectType","references","extraFields","GraphQLObjectType","description","assign","userType","User","measurableType","Measurable","measurementType","Measurement","botType","Bot","agentType","Agent","Users","Agents","Bots","Measurables","measurables","Measurements","simpleResolver","GraphQLNonNull","modelResolvers","plural","args","pick","auth0User","auth0Id","users","findAll","where","getAuth0Id","options","ok","result","user","Error","sub","userAuth0Id","stats","agentCount","GraphQLInt","userCount","botCount","measurementCount","measurableCount","schema","GraphQLSchema","query","id","GraphQLString","ops","_auth0Id","_auth0User","create","e","console","log","findById","mutation","createMeasurement","a","measurableId","newMeasurement","agentId","notification","creationNotification","measurable","getMeasurable","createMeasurable","__","expectedResolutionDate","resolutionEndpoint","descriptionDate","descriptionEntity","newMeasurable","creatorId","archiveMeasurable","archive","unArchiveMeasurable","unarchive","editMeasurable","updateNotifications","update","editUser"],"mappings":"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","file":"schema.js","sourcesContent":["import * as models from \"./models/index\";\nimport * as _ from \"lodash\";\nconst Sequelize = require('sequelize')\nconst jwt = require('express-jwt')\nconst { \n  AuthenticationError, \n} = require('apollo-server');\n\nimport {\n  makeAggregation\n} from \"./services/measurable/MakeAggregation\"\nimport {\n  resolver,\n  attributeFields\n} from \"graphql-sequelize\";\nimport {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLFloat,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLInputObjectType\n} from \"graphql\";\nimport * as GraphQLJSON from \"graphql-type-json\";\nimport {notify} from \"./lib/notifications\";\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst maybePluralize = (count, noun, suffix = 's') =>\n  `${noun}${count !== 1 ? suffix : ''}`;\n\nconst generateReferences = (model) => {\n  let all = {};\n  //Was trying to figure this bit out.\n  // const references = model.associations.\n  const associations = _.toArray(model.associations);\n  associations.map(r => {\n    const hasMany = r.associationType === \"HasMany\"\n    const toMany = r.associationType === \"BelongsToMany\"\n    const otherTableName = r.target.tableName\n    const type = getType[otherTableName]()\n    all[r.as] = {\n      type: hasMany ? GraphQLNonNull(new GraphQLList(type)) : type,\n      resolve: resolver(model[capitalizeFirstLetter(r.as)])\n    };\n    // console.log(model, r.as, otherTableName, type, model[r.as], model[capitalizeFirstLetter(r.as)])\n  });\n  return all;\n};\n\nlet competitor = GraphQLNonNull(new GraphQLEnumType({\n  name: 'competitorType',\n  values: {\n    COMPETITIVE: {value: \"COMPETITIVE\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    AGGREGATION: {value:  \"AGGREGATION\"},\n    OBJECTIVE: {value:  \"OBJECTIVE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nlet valueType = GraphQLNonNull(new GraphQLEnumType({\n  name: 'valueType',\n  values: {\n    FLOAT: {value: \"FLOAT\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    DATE: {value:  \"DATE\"},\n    PERCENTAGE: {value:  \"PERCENTAGE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nconst filterr = (fields) => {\n  let newFields = {...fields}\n  if (!!newFields.competitorType){\n    newFields.competitorType = {type: competitor}\n  }\n  if (!!newFields.valueType){\n    newFields.valueType = {type: valueType}\n  }\n  return newFields\n}\n\nconst makeObjectType = (model, references, extraFields = {}) =>\n  new GraphQLObjectType({\n    name: model.name,\n    description: model.name,\n    fields: () =>\n      _.assign(\n        filterr(attributeFields(model)),\n        generateReferences(model, references),\n        extraFields\n      )\n  });\n\nconst userType = makeObjectType(models.User);\nconst measurableType = makeObjectType(models.Measurable);\nconst measurementType = makeObjectType(models.Measurement);\nconst botType = makeObjectType(models.Bot);\nconst agentType = makeObjectType(models.Agent);\n\nconst getType = {\n  Users: () => userType,\n  Agents: () => agentType,\n  Bots: () => botType,\n  Measurables: () => measurableType,\n  measurables: () => measurableType,\n  Measurements: () => measurementType,\n}\n\nconst simpleResolver = (type, model) => ({\n  type: new GraphQLNonNull(GraphQLList(type)),\n  resolve: resolver(model)\n})\n\nconst modelResolvers = (name, plural, type, model) => {\n  let fields = {};\n  fields[name] = {\n    type: type,\n    args: _.pick(attributeFields(model), ['id']),\n    resolve: resolver(model)\n  };\n  fields[plural] = {\n    type: new GraphQLNonNull(GraphQLList(type)),\n    resolve: resolver(model)\n  }\n  return fields;\n}\n\nasync function auth0User(auth0Id){\n  let users = await models.User.findAll({\n    where: {\n      auth0Id: auth0Id,\n    }\n  })\n  return users && users[0]\n}\n\n//todo: clean up user login code.\n\nconst getAuth0Id = async (options) => {\n  let {ok, result} = await options.user;\n  if (!ok){\n    throw new Error(\n      result.name\n    );\n  }\n  let {sub} = result;\n  if (!sub){\n    throw new Error(\n      \"No User Id\"\n    );\n  }\n  let userAuth0Id = sub;\n  return userAuth0Id\n}\n\nconst stats = new GraphQLObjectType({\n  name: \"Stats\",\n  fields: {\n    agentCount: {\n      type: GraphQLInt,\n      resolve: async () => {\n        return await models.Agent.count();\n      }\n    },\n    userCount: {\n      type: GraphQLInt,\n      resolve: async () => {\n        return await models.User.count();\n      }\n    },\n    botCount: {\n      type: GraphQLInt,\n      resolve: async () => {\n        return await models.Bot.count();\n      }\n    },\n    measurementCount: {\n      type: GraphQLInt,\n      resolve: async () => {\n        return await models.Measurement.count();\n      }\n    },\n    measurableCount: {\n      type: GraphQLInt,\n      resolve: async () => {\n        return await models.Measurable.count();\n      }\n    }\n  }\n})\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      ...modelResolvers(\"user\", \"users\", getType.Users(), models.User),\n      user: {\n        type: getType.Users(),\n        args: {id: {type: GraphQLString}, auth0Id: {type: GraphQLString}},\n        resolve: async (ops, {\n          id,\n          auth0Id\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const _auth0User = await auth0User(_auth0Id);\n          let user;\n          if (_auth0Id && !_auth0User) {\n            try {\n            user = await models.User.create({auth0Id: _auth0Id, name: \"\"})\n            } catch (e) { console.log(\"E\", e)}\n          }\n          if (user){\n            return user;\n          } else if (id){\n            user = await models.User.findById(id);\n            return user\n          } else if (auth0Id){\n            const user = await auth0User(auth0Id)\n            return user;\n          }\n        }\n      },\n      ...modelResolvers(\"measurement\", \"measurements\", getType.Measurements(), models.Measurement),\n      ...modelResolvers(\"measurable\", \"measurables\", getType.Measurables(), models.Measurable),\n      ...modelResolvers(\"bot\", \"bots\", getType.Bots(), models.Bot),\n      ...modelResolvers(\"agent\", \"agents\", getType.Agents(), models.Agent),\n      stats: {\n        type: new GraphQLNonNull(stats),\n        args: {},\n        resolve: async (ops, {}, options) => {\n          return \"sdf\"\n        }\n      },\n    }\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n      createMeasurement: {\n        type: getType.Measurements(),\n        args: filterr(_.pick(attributeFields(models.Measurement), ['value', 'competitorType', 'measurableId', 'agentId', 'description'])),\n        resolve: async (a, {\n          value,\n          competitorType,\n          measurableId,\n          description,\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          const newMeasurement = await models.Measurement.create({\n            value,\n            competitorType,\n            measurableId,\n            description,\n            agentId: user.agentId,\n          })\n          let notification = await newMeasurement.creationNotification(user);\n          notify(notification);\n          const measurable = await newMeasurement.getMeasurable();\n          return newMeasurement\n        }\n      },\n      createMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['name', 'description', 'valueType', 'expectedResolutionDate', 'resolutionEndpoint', 'descriptionEntity', 'descriptionDate'])),\n        resolve: async (__, {\n          name,\n          description,\n          valueType,\n          expectedResolutionDate,\n          resolutionEndpoint,\n          descriptionDate,\n          descriptionEntity\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          const newMeasurable = await models.Measurable.create({\n          name,\n          valueType,\n          description,\n          expectedResolutionDate,\n          creatorId: user.agentId,\n          descriptionEntity,\n          descriptionDate,\n          resolutionEndpoint\n          })\n          let notification = await newMeasurable.creationNotification(user);\n          notify(notification)\n          return newMeasurable\n        }\n      },\n      archiveMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['id'])),\n        resolve: async (__, {\n          id,\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          let measurable = await models.Measurable.findById(id);\n          if (measurable.creatorId !== user.agentId){\n            throw new Error(\"User does not have permission\")\n          }\n          return measurable.archive()\n        }\n      },\n      unArchiveMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['id'])),\n        resolve: async (__, {\n          id,\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          let measurable = await models.Measurable.findById(id);\n          if (measurable.creatorId !== user.agentId){\n            throw new Error(\"User does not have permission\")\n          }\n          return measurable.unarchive()\n        }\n      },\n      editMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['id','name', 'description', 'expectedResolutionDate', 'resolutionEndpoint', 'descriptionEntity', 'descriptionDate'])),\n        resolve: async (__, {\n          id,\n          name,\n          description,\n          expectedResolutionDate,\n          descriptionEntity,\n          descriptionDate,\n          resolutionEndpoint\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options)\n          const user = await auth0User(_auth0Id);\n          let measurable = await models.Measurable.findById(id);\n          if (measurable.creatorId !== user.agentId){\n            throw new Error(\"User does not have permission\")\n          }\n          let notification = await measurable.updateNotifications(user, {name, description, expectedResolutionDate,resolutionEndpoint, descriptionEntity, descriptionDate});\n          notify(notification);\n          return measurable.update({name, description, expectedResolutionDate, resolutionEndpoint, descriptionEntity, descriptionDate})\n        }\n      },\n      editUser: {\n        type: getType.Users(),\n        args: filterr(_.pick(attributeFields(models.User), [\"id\", \"name\"])),\n        resolve: async (_, {\n          id,\n          name\n        }, options) => {\n          let _auth0Id = await getAuth0Id(options);\n          let user = await models.User.findById(id);\n          if (user && (user.auth0Id == _auth0Id)) {\n            user.update({name})\n          }\n          return user\n        }\n      },\n    }\n    })\n});\n\nexport {\n  schema\n};\n"]}