{"version":3,"sources":["../src/schema.js"],"names":["models","_","GraphQLJSON","Sequelize","require","capitalizeFirstLetter","str","charAt","toUpperCase","slice","maybePluralize","count","noun","suffix","generateReferences","model","all","associations","toArray","map","r","hasMany","associationType","toMany","otherTableName","target","tableName","type","getType","as","GraphQLList","resolve","competitor","GraphQLEnumType","name","values","COMPETITIVE","value","AGGREGATION","OBJECTIVE","valueType","FLOAT","DATE","PERCENTAGE","filterr","fields","newFields","competitorType","makeObjectType","references","extraFields","GraphQLObjectType","description","assign","userType","User","measurableType","Measurable","measurementType","Measurement","botType","Bot","agentType","Agent","Users","Agents","Bots","Measurables","measurables","Measurements","simpleResolver","GraphQLNonNull","modelResolvers","plural","args","pick","auth0User","auth0Id","user","findAll","where","schema","GraphQLSchema","query","id","GraphQLString","ops","findById","mutation","createMeasurement","__","measurableId","agentId","userAuth0Id","newMeasurement","create","measurable","getMeasurable","createMeasurable","newMeasurable","editUser","update"],"mappings":"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","file":"schema.js","sourcesContent":["import * as models from \"./models/index\";\nimport * as _ from \"lodash\";\nconst Sequelize = require('sequelize')\nimport {\n  makeAggregation\n} from \"./services/measurable/MakeAggregation\"\nimport {\n  resolver,\n  attributeFields\n} from \"graphql-sequelize\";\nimport {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLFloat,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLInt,\n  GraphQLString,\n  GraphQLInputObjectType\n} from \"graphql\";\nimport * as GraphQLJSON from \"graphql-type-json\";\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst maybePluralize = (count, noun, suffix = 's') =>\n  `${noun}${count !== 1 ? suffix : ''}`;\n\nconst generateReferences = (model) => {\n  let all = {};\n  //Was trying to figure this bit out.\n  // const references = model.associations.\n  const associations = _.toArray(model.associations);\n  associations.map(r => {\n    const hasMany = r.associationType === \"HasMany\"\n    const toMany = r.associationType === \"BelongsToMany\"\n    const otherTableName = r.target.tableName\n    const type = getType[otherTableName]()\n    all[r.as] = {\n      type: hasMany ? GraphQLNonNull(new GraphQLList(type)) : type,\n      resolve: resolver(model[capitalizeFirstLetter(r.as)])\n    };\n    // console.log(model, r.as, otherTableName, type, model[r.as], model[capitalizeFirstLetter(r.as)])\n  });\n  return all;\n};\n\nlet competitor = GraphQLNonNull(new GraphQLEnumType({\n  name: 'competitorType',\n  values: {\n    COMPETITIVE: {value: \"COMPETITIVE\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    AGGREGATION: {value:  \"AGGREGATION\"},\n    OBJECTIVE: {value:  \"OBJECTIVE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nlet valueType = GraphQLNonNull(new GraphQLEnumType({\n  name: 'valueType',\n  values: {\n    FLOAT: {value: \"FLOAT\"}, // The first ENUM value will be the default order. The direction will be used for `first`, will automatically be inversed for `last` lookups.\n    DATE: {value:  \"DATE\"},\n    PERCENTAGE: {value:  \"PERCENTAGE\"} // build and return custom order for sequelize orderBy option\n  }\n}))\n\nconst filterr = (fields) => {\n  let newFields = {...fields}\n  if (!!newFields.competitorType){\n    newFields.competitorType = {type: competitor}\n  }\n  if (!!newFields.valueType){\n    newFields.valueType = {type: valueType}\n  }\n  return newFields\n}\n\nconst makeObjectType = (model, references, extraFields = {}) =>\n  new GraphQLObjectType({\n    name: model.name,\n    description: model.name,\n    fields: () =>\n      _.assign(\n        filterr(attributeFields(model)),\n        generateReferences(model, references),\n        extraFields\n      )\n  });\n\nconst userType = makeObjectType(models.User);\nconst measurableType = makeObjectType(models.Measurable);\nconst measurementType = makeObjectType(models.Measurement);\nconst botType = makeObjectType(models.Bot);\nconst agentType = makeObjectType(models.Agent);\n\nconst getType = {\n  Users: () => userType,\n  Agents: () => agentType,\n  Bots: () => botType,\n  Measurables: () => measurableType,\n  measurables: () => measurableType,\n  Measurements: () => measurementType,\n}\n\nconst simpleResolver = (type, model) => ({\n  type: new GraphQLNonNull(GraphQLList(type)),\n  resolve: resolver(model)\n})\n\nconst modelResolvers = (name, plural, type, model) => {\n  let fields = {};\n  fields[name] = {\n    type: type,\n    args: _.pick(attributeFields(model), ['id']),\n    resolve: resolver(model)\n  };\n  fields[plural] = {\n    type: new GraphQLNonNull(GraphQLList(type)),\n    resolve: resolver(model)\n  }\n  return fields;\n}\n\nasync function auth0User(auth0Id){\n  let user = await models.User.findAll({\n    where: {\n      auth0Id: auth0Id,\n    }\n  })\n  return user[0]\n}\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      ...modelResolvers(\"user\", \"users\", getType.Users(), models.User),\n      user: {\n        type: getType.Users(),\n        args: {id: {type: GraphQLString}, auth0Id: {type: GraphQLString}},\n        resolve: async (ops, {\n          id,\n          auth0Id\n        }) => {\n          if (id){\n            const user = await models.User.findById(id);\n            return user;\n          } else if (auth0Id){\n            const user = await auth0User(auth0Id)\n            return user;\n          }\n        }\n      },\n      ...modelResolvers(\"measurement\", \"measurements\", getType.Measurements(), models.Measurement),\n      ...modelResolvers(\"measurable\", \"measurables\", getType.Measurables(), models.Measurable),\n      ...modelResolvers(\"bot\", \"bots\", getType.Bots(), models.Bot),\n      ...modelResolvers(\"agent\", \"agents\", getType.Agents(), models.Agent),\n    }\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n      createMeasurement: {\n        type: getType.Measurements(),\n        args: filterr(_.pick(attributeFields(models.Measurement), ['value', 'competitorType', 'measurableId', 'agentId'])),\n        resolve: async (__, {\n          value,\n          competitorType,\n          measurableId,\n          agentId,\n        }, {userAuth0Id}) => {\n          const user = await auth0User(userAuth0Id);\n          const newMeasurement = await models.Measurement.create({\n            value,\n            competitorType,\n            measurableId,\n            agentId: user.agentId,\n          })\n          const measurable = await newMeasurement.getMeasurable();\n          return newMeasurement\n        }\n      },\n      createMeasurable: {\n        type: getType.Measurables(),\n        args: filterr(_.pick(attributeFields(models.Measurable), ['name', 'valueType'])),\n        resolve: async (__, {\n          name,\n          valueType\n        }, {userAuth0Id}) => {\n          const newMeasurable = await models.Measurable.create({\n          name,\n          valueType\n          })\n          return newMeasurable\n        }\n      },\n      editUser: {\n        type: getType.Users(),\n        args: filterr(_.pick(attributeFields(models.User), [\"id\", \"name\"])),\n        resolve: async (_, {\n          id,\n          name\n        }, {userAuth0Id}) => {\n          let user = await models.User.findById(id);\n          if (user && (user.auth0Id == userAuth0Id)) {\n            user.update({name})\n          }\n          return user\n        }\n      },\n    }\n    })\n});\n\nexport {\n  schema\n};\n"]}