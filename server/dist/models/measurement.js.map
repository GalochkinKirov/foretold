{"version":3,"sources":["../../src/models/measurement.js"],"names":["Sequelize","require","clientUrl","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","value","JSON","competitorType","ENUM","description","TEXT","measurableId","agentId","relevantAt","DATE","get","getDataValue","hooks","afterCreate","measurement","options","dataValues","measurable","getMeasurable","judged","prototype","creationNotification","creator","agent","getAgent","notification","name","associate","models","Measurable","belongsTo","foreignKey","Agent","TaggedMeasurement","Measurement","as","TaggedBy","hasMany"],"mappings":"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","file":"measurement.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\nconst {clientUrl} = require('../lib/urls');\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Measurement', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    value: {\n      type: DataTypes.JSON,\n      allowNull: false\n    },\n    competitorType: {\n      type: DataTypes.ENUM([\"OBJECTIVE\", \"COMPETITIVE\", \"AGGREGATION\"]),\n      defaultValue: \"COMPETITIVE\",\n      allowNull: true,\n    },\n    description: {\n      type: DataTypes.TEXT,\n      allowNull: true \n    },\n    measurableId: {\n      type: DataTypes.UUID,\n      allowNull: false\n    },\n    agentId: {\n      type: DataTypes.UUID,\n      allowNull: true\n    },\n    relevantAt: {\n      allowNull: true,\n      type: Sequelize.DATE,\n      get() {\n        return this.getDataValue('relevantAt') || this.getDataValue('createdAt')\n      }\n    },\n  }, {\n    hooks: {\n      afterCreate: async (measurement, options) => {\n        if (measurement.dataValues.competitorType == \"OBJECTIVE\"){\n          const measurable = await measurement.getMeasurable();\n          await measurable.judged();\n        }\n      }\n    }\n  });\n\n  Model.prototype.creationNotification= async function(creator){\n    let agent = await creator.getAgent();\n    let measurable = await this.getMeasurable();\n    let notification = await {\n      \"attachments\": [{\n        \"pretext\": \"New Measurement Created\",\n        \"title\": measurable.name,\n        \"title_link\": `${clientUrl}/measurables/${measurable.id}`,\n        \"author_name\": creator.name,\n        \"author_link\": `${clientUrl}/agents/${agent.id}`,\n        \"text\": this.description,\n        \"fields\": [\n            {\n                \"title\": \"Type\",\n                \"value\": this.competitorType,\n                \"short\": true\n            }\n        ],\n        \"color\": \"#d2ebff\"\n    }]};\n    return notification;\n  }\n  Model.associate = function (models) {\n    Model.Measurable = Model.belongsTo(models.Measurable, {\n      foreignKey: 'measurableId'\n    })\n    Model.Agent = Model.belongsTo(models.Agent, {\n      foreignKey: 'agentId'\n    })\n    Model.TaggedMeasurement = Model.belongsTo(models.Measurement, {\n      foreignKey: 'taggedMeasurementId',\n      as: 'TaggedMeasurement'\n    })\n    Model.TaggedBy = Model.hasMany(models.Measurement, {\n      foreignKey: 'taggedMeasurementId',\n      as: 'TaggedBy'\n    })\n  }\n  return Model;\n};\n"]}