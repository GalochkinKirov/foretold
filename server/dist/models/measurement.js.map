{"version":3,"sources":["../../src/models/measurement.js"],"names":["Sequelize","require","console","log","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","value","JSON","competitorType","ENUM","measurableId","agentId","relevantAt","DATE","get","getDataValue","associate","models","Measurable","belongsTo","foreignKey","Agent","TaggedMeasurement","Measurement","as","TaggedBy","hasMany"],"mappings":"AAAA;;AACA,MAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEAC,QAAQC,GAAR,CAAY,SAAZ;AACAC,OAAOC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,MAAIC,QAAQF,UAAUG,MAAV,CAAiB,aAAjB,EAAgC;AAC1CC,QAAI;AACFC,YAAMJ,UAAUK,IAAV,EADJ;AAEFC,kBAAY,IAFV;AAGFC,oBAAcd,UAAUe,MAHtB;AAIFC,iBAAW;AAJT,KADsC;AAO1CC,WAAO;AACLN,YAAMJ,UAAUW,IADX;AAELF,iBAAW;AAFN,KAPmC;AAW1CG,oBAAgB;AACdR,YAAMJ,UAAUa,IAAV,CAAe,CAAC,WAAD,EAAc,aAAd,EAA6B,aAA7B,CAAf,CADQ;AAEdN,oBAAc,aAFA;AAGdE,iBAAW;AAHG,KAX0B;AAgB1CK,kBAAc;AACZV,YAAMJ,UAAUK,IADJ;AAEZI,iBAAW;AAFC,KAhB4B;AAoB1CM,aAAS;AACPX,YAAMJ,UAAUK,IADT;AAEPI,iBAAW;AAFJ,KApBiC;AAwB1CO,gBAAY;AACVP,iBAAW,IADD;AAEVL,YAAMX,UAAUwB,IAFN;AAGVC,YAAM;AACJ,eAAO,KAAKC,YAAL,CAAkB,YAAlB,KAAmC,KAAKA,YAAL,CAAkB,WAAlB,CAA1C;AACD;AALS;AAxB8B,GAAhC,CAAZ;AAgCAlB,QAAMmB,SAAN,GAAkB,UAAUC,MAAV,EAAkB;AAClCpB,UAAMqB,UAAN,GAAmBrB,MAAMsB,SAAN,CAAgBF,OAAOC,UAAvB,EAAmC;AACpDE,kBAAY;AADwC,KAAnC,CAAnB;AAGAvB,UAAMwB,KAAN,GAAcxB,MAAMsB,SAAN,CAAgBF,OAAOI,KAAvB,EAA8B;AAC1CD,kBAAY;AAD8B,KAA9B,CAAd;AAGAvB,UAAMyB,iBAAN,GAA0BzB,MAAMsB,SAAN,CAAgBF,OAAOM,WAAvB,EAAoC;AAC5DH,kBAAY,qBADgD;AAE5DI,UAAI;AAFwD,KAApC,CAA1B;AAIA3B,UAAM4B,QAAN,GAAiB5B,MAAM6B,OAAN,CAAcT,OAAOM,WAArB,EAAkC;AACjDH,kBAAY,qBADqC;AAEjDI,UAAI;AAF6C,KAAlC,CAAjB;AAID,GAfD;AAgBA,SAAO3B,KAAP;AACD,CAlDD","file":"measurement.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\n\nconsole.log(\"LOADING\")\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Measurement', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    value: {\n      type: DataTypes.JSON,\n      allowNull: false\n    },\n    competitorType: {\n      type: DataTypes.ENUM([\"OBJECTIVE\", \"COMPETITIVE\", \"AGGREGATION\"]),\n      defaultValue: \"COMPETITIVE\",\n      allowNull: true,\n    },\n    measurableId: {\n      type: DataTypes.UUID,\n      allowNull: false\n    },\n    agentId: {\n      type: DataTypes.UUID,\n      allowNull: true\n    },\n    relevantAt: {\n      allowNull: true,\n      type: Sequelize.DATE,\n      get() {\n        return this.getDataValue('relevantAt') || this.getDataValue('createdAt')\n      }\n    },\n  });\n  Model.associate = function (models) {\n    Model.Measurable = Model.belongsTo(models.Measurable, {\n      foreignKey: 'measurableId'\n    })\n    Model.Agent = Model.belongsTo(models.Agent, {\n      foreignKey: 'agentId'\n    })\n    Model.TaggedMeasurement = Model.belongsTo(models.Measurement, {\n      foreignKey: 'taggedMeasurementId',\n      as: 'TaggedMeasurement'\n    })\n    Model.TaggedBy = Model.hasMany(models.Measurement, {\n      foreignKey: 'taggedMeasurementId',\n      as: 'TaggedBy'\n    })\n  }\n  return Model;\n};\n"]}