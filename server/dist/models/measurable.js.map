{"version":3,"sources":["../../src/models/measurable.js"],"names":["Sequelize","require","fetch","moment","clientUrl","states","ARCHIVED","OPEN","JUDGED","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","name","STRING","descriptionEntity","descriptionDate","DATE","descriptionProperty","description","TEXT","resolutionEndpoint","hasResolutionEndpointResolved","BOOLEAN","valueType","ENUM","isJudged","state","channel","stateUpdatedAt","expectedResolutionDate","measurementCount","VIRTUAL","INTEGER","get","items","getMeasurements","length","measurerCount","_","uniq","map","i","agentId","resolutionEndpointResponse","FLOAT","endpoint","dataValues","response","json","match","JSON","stringify","asFloat","parseFloat","console","log","e","error","needsResolutionResponse","findAll","where","Op","ne","lt","Date","prototype","updateState","update","archive","unarchive","judged","processResolution","models","Measurement","create","competitorType","measurableId","value","creationNotification","creator","agent","getAgent","notification","format","changedFields","ops","Object","keys","filter","r","updateNotifications","newData","changed","c","associate","Measurements","hasMany","foreignKey","as","Creator","belongsTo","Agent"],"mappings":"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","file":"measurable.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\nimport _ from \"lodash\";\nconst fetch = require(\"node-fetch\");\nconst moment = require('moment');\nconst {clientUrl} = require('../lib/urls');\n\nconst states = {\n  ARCHIVED: \"ARCHIVED\",\n  OPEN: \"OPEN\",\n  JUDGED: \"JUDGED\"\n}\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Measurable', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    descriptionEntity: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    descriptionDate: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    descriptionProperty: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    description: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n    resolutionEndpoint: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n    hasResolutionEndpointResolved: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: false,\n    },\n    valueType: {\n      type: DataTypes.ENUM([\"FLOAT\", \"DATE\", \"PERCENTAGE\"]),\n      allowNull: false,\n    },\n    isJudged: {\n      allowNull: false,\n      defaultValue: false,\n      type: DataTypes.BOOLEAN\n    },\n    state: {\n      type: DataTypes.STRING,\n      defaultValue: \"OPEN\",\n      allowNull: false,\n    },\n    channel: {\n      type: DataTypes.STRING,\n      defaultValue: \"general\",\n      allowNull: true,\n    },\n    stateUpdatedAt: {\n      allowNull: true,\n      type: DataTypes.DATE\n    },\n    expectedResolutionDate: {\n      allowNull: true,\n      type: DataTypes.DATE\n    },\n    measurementCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return items.length\n      }\n    },\n    measurerCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return _.uniq(items.map(i => i.agentId)).length\n      }\n    },\n    resolutionEndpointResponse: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.FLOAT),\n      get: async function() {\n        const endpoint = await this.dataValues.resolutionEndpoint;\n        if ( !endpoint ||endpoint.length == 0|| endpoint == \"\") {\n          return false \n        }\n        try {\n        const response = await fetch(endpoint);\n        const json = await response.json();\n        const match = JSON.stringify(json).match(/[-+]?[0-9]*\\.?[0-9]+/);\n        const asFloat = parseFloat(match[0]);\n        console.log(`got response from endpoint. Url: ${endpoint}, Response: ${JSON.stringify(json)}, Float: ${asFloat}`);\n        return asFloat;\n        }\n        catch(e) {\n          console.error(`Error getting response from endpoint. Url: ${endpoint}, error: ${e}`)\n          return null\n        }\n      }\n    },\n  });\n\n  Model.needsResolutionResponse = async function(){\n    return await Model.findAll({\n      where: {\n        hasResolutionEndpointResolved: false,\n        resolutionEndpoint: {\n          [Sequelize.Op.ne]: \"\"\n        },\n        expectedResolutionDate: {\n          [Sequelize.Op.lt]: new Date()\n        }\n      }\n    })\n  }\n\n  Model.prototype.updateState = async function(state){\n      await this.update({state, stateUpdatedAt: new Date()})\n  }\n\n  Model.prototype.archive = async function(){\n      await this.updateState(states.ARCHIVED)\n  }\n\n  Model.prototype.unarchive = async function(){\n    await this.updateState(this.isJudged ? states.JUDGED : states.OPEN)\n  }\n\n  Model.prototype.judged = async function(){\n    if (!this.isJudged || this.state !== states.JUDGED) {\n      await this.update({isJudged: true})\n      await this.updateState(states.JUDGED)\n    }\n  }\n\n  Model.prototype.processResolution = async function(agentId){\n    const asFloat = await this.resolutionEndpointResponse;\n    if (asFloat){\n      await sequelize.models.Measurement.create({\n          agentId,\n          competitorType: \"OBJECTIVE\",\n          measurableId: this.dataValues.id,\n          value: {\"dataType\":\"floatPoint\",\"data\":asFloat}\n      });\n      await this.update({hasResolutionEndpointResolved: true});\n      await this.judged();\n    }\n  }\n\n  Model.prototype.creationNotification= async function(creator){\n    let agent = await creator.getAgent();\n    let notification = {\n      \"attachments\": [{\n        \"pretext\": \"New Measurable Created\",\n        \"title\": this.name,\n        \"title_link\": `${clientUrl}/measurables/${this.id}`,\n        \"author_name\": creator.name,\n        \"author_link\": `${clientUrl}/agents/${agent.id}`,\n        \"text\": this.description,\n        \"fields\": [\n            {\n                \"title\": \"Resolution Date\",\n                \"value\": moment(this.expectedResolutionDate).format(\"MMM DD, YYYY\"),\n                \"short\": true\n            }\n        ],\n        \"color\": \"#4a8ed8\"\n    }]};\n    return notification;\n  }\n\n  Model.prototype.changedFields = function(ops){\n    return Object.keys(ops).filter(r => r !== \"expectedResolutionDate\").filter(r => this[r] !== ops[r]);\n  }\n\n  Model.prototype.updateNotifications = async function(creator, newData){\n    let changed = this.changedFields(newData);\n    let agent = await creator.getAgent();\n    let notification = {\n      \"attachments\": [{\n        \"pretext\": \"Measurable Updated\",\n        \"title\": this.name,\n        \"title_link\": `${clientUrl}/measurables/${this.id}`,\n        \"author_name\": creator.name,\n        \"author_link\": `${clientUrl}/agents/${agent.id}`,\n        \"fields\": changed.map(c => ({\n          \"title\": c,\n          \"short\": false,\n          \"value\": `*From*: ${this[c]} \\n*To*:  ${newData[c]}`\n        })),\n        \"color\": \"#ffe75e\"\n    }]};\n    return notification;\n  }\n\n  Model.associate = function (models) {\n    Model.Measurements = Model.hasMany(models.Measurement, {\n      foreignKey: 'measurableId',\n      as: 'Measurements'\n    })\n    Model.Creator = Model.belongsTo(models.Agent, {\n      foreignKey: 'creatorId',\n      as: 'creator'\n    })\n  }\n  return Model;\n};\n"]}