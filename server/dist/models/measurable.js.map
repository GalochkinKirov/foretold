{"version":3,"sources":["../../src/models/measurable.js"],"names":["Sequelize","require","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","name","STRING","valueType","ENUM","isLocked","BOOLEAN","lockedAt","DATE","measurementCount","VIRTUAL","INTEGER","get","items","getMeasurements","length","associate","models","Measurements","hasMany","Measurement","foreignKey","as"],"mappings":"AAAA;;AACA,MAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEAC,OAAOC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,MAAIC,QAAQF,UAAUG,MAAV,CAAiB,YAAjB,EAA+B;AACzCC,QAAI;AACFC,YAAMJ,UAAUK,IAAV,EADJ;AAEFC,kBAAY,IAFV;AAGFC,oBAAcZ,UAAUa,MAHtB;AAIFC,iBAAW;AAJT,KADqC;AAOzCC,UAAM;AACJN,YAAMJ,UAAUW,MADZ;AAEJF,iBAAW;AAFP,KAPmC;AAWzCG,eAAW;AACTR,YAAMJ,UAAUa,IAAV,CAAe,CAAC,OAAD,EAAU,MAAV,EAAkB,YAAlB,CAAf,CADG;AAETJ,iBAAW;AAFF,KAX8B;AAezCK,cAAU;AACRL,iBAAW,KADH;AAERF,oBAAc,KAFN;AAGRH,YAAMJ,UAAUe;AAHR,KAf+B;AAoBzCC,cAAU;AACRP,iBAAW,IADH;AAERL,YAAMJ,UAAUiB;AAFR,KApB+B;AAwBzCC,sBAAkB;AAChBT,iBAAW,IADK;AAEhBL,YAAMT,UAAUwB,OAAV,CAAkBnB,UAAUoB,OAA5B,CAFU;AAGhBC,WAAK,kBAAiB;AACpB,cAAMC,QAAQ,MAAM,KAAKC,eAAL,EAApB;AACA,eAAOD,MAAME,MAAb;AACD;AANe;AAxBuB,GAA/B,CAAZ;AAiCAvB,QAAMwB,SAAN,GAAkB,UAAUC,MAAV,EAAkB;AAClCzB,UAAM0B,YAAN,GAAqB1B,MAAM2B,OAAN,CAAcF,OAAOG,WAArB,EAAkC;AACrDC,kBAAY,cADyC;AAErDC,UAAI;AAFiD,KAAlC,CAArB;AAID,GALD;AAMA,SAAO9B,KAAP;AACD,CAzCD","file":"measurable.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Measurable', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    valueType: {\n      type: DataTypes.ENUM([\"FLOAT\", \"DATE\", \"PERCENTAGE\"]),\n      allowNull: false,\n    },\n    isLocked: {\n      allowNull: false,\n      defaultValue: false,\n      type: DataTypes.BOOLEAN\n    },\n    lockedAt: {\n      allowNull: true,\n      type: DataTypes.DATE\n    },\n    measurementCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return items.length\n      }\n    },\n  });\n  Model.associate = function (models) {\n    Model.Measurements = Model.hasMany(models.Measurement, {\n      foreignKey: 'measurableId',\n      as: 'Measurements'\n    })\n  }\n  return Model;\n};\n"]}