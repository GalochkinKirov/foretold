{"version":3,"sources":["../../src/models/measurable.js"],"names":["Sequelize","require","fetch","moment","clientUrl","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","name","STRING","description","TEXT","resolutionEndpoint","hasResolutionEndpointResolved","BOOLEAN","valueType","ENUM","isLocked","lockedAt","DATE","expectedResolutionDate","measurementCount","VIRTUAL","INTEGER","get","items","getMeasurements","length","measurerCount","_","uniq","map","i","agentId","resolutionEndpointResponse","FLOAT","endpoint","dataValues","response","json","match","JSON","stringify","asFloat","parseFloat","console","log","e","error","needsResolutionResponse","findAll","where","Op","ne","lt","Date","prototype","lock","update","processResolution","models","Measurement","create","competitorType","measurableId","value","creationNotification","creator","agent","getAgent","notification","format","changedFields","ops","Object","keys","filter","r","updateNotifications","newData","changed","c","associate","Measurements","hasMany","foreignKey","as","Creator","belongsTo","Agent"],"mappings":"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","file":"measurable.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\nimport _ from \"lodash\";\nconst fetch = require(\"node-fetch\");\nconst moment = require('moment');\nconst {clientUrl} = require('../lib/urls');\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Measurable', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    description: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n    resolutionEndpoint: {\n      type: DataTypes.TEXT,\n      allowNull: true,\n    },\n    hasResolutionEndpointResolved: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: false,\n    },\n    valueType: {\n      type: DataTypes.ENUM([\"FLOAT\", \"DATE\", \"PERCENTAGE\"]),\n      allowNull: false,\n    },\n    isLocked: {\n      allowNull: false,\n      defaultValue: false,\n      type: DataTypes.BOOLEAN\n    },\n    lockedAt: {\n      allowNull: true,\n      type: DataTypes.DATE\n    },\n    expectedResolutionDate: {\n      allowNull: true,\n      type: DataTypes.DATE\n    },\n    measurementCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return items.length\n      }\n    },\n    measurerCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return _.uniq(items.map(i => i.agentId)).length\n      }\n    },\n    resolutionEndpointResponse: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.FLOAT),\n      get: async function() {\n        const endpoint = await this.dataValues.resolutionEndpoint;\n        if (endpoint.length == 0 || !endpoint) {\n          return null\n        }\n        try {\n        const response = await fetch(endpoint);\n        const json = await response.json();\n        const match = JSON.stringify(json).match(/[-+]?[0-9]*\\.?[0-9]+/);\n        const asFloat = parseFloat(match[0]);\n        console.log(`got response from endpoint. Url: ${endpoint}, Response: ${JSON.stringify(json)}, Float: ${asFloat}`);\n        return asFloat;\n        }\n        catch(e) {\n          console.error(`Error getting response from endpoint. Url: ${endpoint}, error: ${e}`)\n          return null\n        }\n      }\n    },\n  });\n\n  Model.needsResolutionResponse = async function(){\n    return await Model.findAll({\n      where: {\n        hasResolutionEndpointResolved: false,\n        resolutionEndpoint: {\n          [Sequelize.Op.ne]: \"\"\n        },\n        expectedResolutionDate: {\n          [Sequelize.Op.lt]: new Date()\n        }\n      }\n    })\n  }\n\n  Model.prototype.lock = async function(){\n      await this.update({isLocked: true, lockedAt: new Date()})\n  }\n\n  Model.prototype.processResolution = async function(agentId){\n    const asFloat = await this.resolutionEndpointResponse;\n    if (asFloat){\n      await sequelize.models.Measurement.create({\n          agentId,\n          competitorType: \"OBJECTIVE\",\n          measurableId: this.dataValues.id,\n          value: {\"dataType\":\"floatPoint\",\"data\":asFloat}\n      });\n      await this.update({hasResolutionEndpointResolved: true, isLocked: true})\n    }\n  }\n\n  Model.prototype.creationNotification= async function(creator){\n    let agent = await creator.getAgent();\n    let notification = {\n      \"attachments\": [{\n        \"pretext\": \"New Measurable Created\",\n        \"title\": this.name,\n        \"title_link\": `${clientUrl}/measurables/${this.id}`,\n        \"author_name\": creator.name,\n        \"author_link\": `${clientUrl}/agents/${agent.id}`,\n        \"text\": this.description,\n        \"fields\": [\n            {\n                \"title\": \"Resolution Date\",\n                \"value\": moment(this.expectedResolutionDate).format(\"MMM DD, YYYY\"),\n                \"short\": true\n            }\n        ],\n        \"color\": \"#4a8ed8\"\n    }]};\n    return notification;\n  }\n\n  Model.prototype.changedFields = function(ops){\n    return Object.keys(ops).filter(r => r !== \"expectedResolutionDate\").filter(r => this[r] !== ops[r]);\n  }\n\n  Model.prototype.updateNotifications = async function(creator, newData){\n    let changed = this.changedFields(newData);\n    let agent = await creator.getAgent();\n    let notification = {\n      \"attachments\": [{\n        \"pretext\": \"Measurable Updated\",\n        \"title\": this.name,\n        \"title_link\": `${clientUrl}/measurables/${this.id}`,\n        \"author_name\": creator.name,\n        \"author_link\": `${clientUrl}/agents/${agent.id}`,\n        \"fields\": changed.map(c => ({\n          \"title\": c,\n          \"short\": false,\n          \"value\": `*From*: ${this[c]} \\n*To*:  ${newData[c]}`\n        })),\n        \"color\": \"#ffe75e\"\n    }]};\n    return notification;\n  }\n\n  Model.associate = function (models) {\n    Model.Measurements = Model.hasMany(models.Measurement, {\n      foreignKey: 'measurableId',\n      as: 'Measurements'\n    })\n    Model.Creator = Model.belongsTo(models.Agent, {\n      foreignKey: 'creatorId',\n      as: 'creator'\n    })\n  }\n  return Model;\n};\n"]}