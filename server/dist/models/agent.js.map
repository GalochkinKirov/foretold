{"version":3,"sources":["../../src/models/agent.js"],"names":["Sequelize","require","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","ENUM","name","VIRTUAL","STRING","get","user","getUser","bot","getBot","measurementCount","INTEGER","items","getMeasurements","length","associate","models","User","hasOne","foreignKey","Bot","Measurements","hasMany","Measurement","as","Measurables","Measurable"],"mappings":"AAAA;;AACA,MAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEAC,OAAOC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,MAAIC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACpCC,QAAI;AACFC,YAAMJ,UAAUK,IAAV,EADJ;AAEFC,kBAAY,IAFV;AAGFC,oBAAcZ,UAAUa,MAHtB;AAIFC,iBAAW;AAJT,KADgC;AAOpCL,UAAM;AACJA,YAAMJ,UAAUU,IAAV,CAAe,CAAC,MAAD,EAAS,KAAT,CAAf,CADF;AAEJD,iBAAW;AAFP,KAP8B;AAWpCE,UAAM;AACJF,iBAAW,IADP;AAEJL,YAAMT,UAAUiB,OAAV,CAAkBZ,UAAUa,MAA5B,CAFF;AAGJC,WAAK,kBAAiB;AACpB,YAAI,KAAKV,IAAL,IAAa,MAAjB,EAAwB;AACtB,gBAAMW,OAAO,MAAM,KAAKC,OAAL,EAAnB;AACA,iBAAOD,KAAKJ,IAAZ;AACD,SAHD,MAGO;AACL,gBAAMM,MAAM,MAAM,KAAKC,MAAL,EAAlB;AACA,iBAAOD,IAAIN,IAAX;AACD;AACF;AAXG,KAX8B;AAwBpCQ,sBAAkB;AAChBV,iBAAW,IADK;AAEhBL,YAAMT,UAAUiB,OAAV,CAAkBZ,UAAUoB,OAA5B,CAFU;AAGhBN,WAAK,kBAAiB;AACpB,cAAMO,QAAQ,MAAM,KAAKC,eAAL,EAApB;AACA,eAAOD,MAAME,MAAb;AACD;AANe;AAxBkB,GAA1B,CAAZ;AAiCAtB,QAAMuB,SAAN,GAAkB,UAAUC,MAAV,EAAkB;AAClCxB,UAAMyB,IAAN,GAAazB,MAAM0B,MAAN,CAAaF,OAAOC,IAApB,EAA0B;AACrCE,kBAAY;AADyB,KAA1B,CAAb;AAGA3B,UAAM4B,GAAN,GAAY5B,MAAM0B,MAAN,CAAaF,OAAOI,GAApB,EAAyB;AACnCD,kBAAY;AADuB,KAAzB,CAAZ;AAGA3B,UAAM6B,YAAN,GAAqB7B,MAAM8B,OAAN,CAAcN,OAAOO,WAArB,EAAkC;AACrDJ,kBAAY,SADyC;AAErDK,UAAI;AAFiD,KAAlC,CAArB;AAIAhC,UAAMiC,WAAN,GAAoBjC,MAAM8B,OAAN,CAAcN,OAAOU,UAArB,EAClB;AACEP,kBAAY;AADd,KADkB,CAApB;AAKD,GAhBD;AAiBA,SAAO3B,KAAP;AACD,CApDD","file":"agent.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Agent', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    type: {\n      type: DataTypes.ENUM([\"USER\", \"BOT\"]),\n      allowNull: false,\n    },\n    name: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.STRING),\n      get: async function() {\n        if (this.type == \"USER\"){\n          const user = await this.getUser();\n          return user.name\n        } else {\n          const bot = await this.getBot();\n          return bot.name\n        }\n      }\n    },\n    measurementCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return items.length\n      }\n    },\n  });\n  Model.associate = function (models) {\n    Model.User = Model.hasOne(models.User, {\n      foreignKey: 'agentId',\n    })\n    Model.Bot = Model.hasOne(models.Bot, {\n      foreignKey: 'agentId',\n    })\n    Model.Measurements = Model.hasMany(models.Measurement, {\n      foreignKey: 'agentId',\n      as: 'Measurements'\n    })\n    Model.Measurables = Model.hasMany(models.Measurable, \n      {\n        foreignKey: 'creatorId',\n    }\n    )\n  }\n  return Model;\n};\n"]}