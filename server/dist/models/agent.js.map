{"version":3,"sources":["../../src/models/agent.js"],"names":["Sequelize","require","module","exports","sequelize","DataTypes","Model","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","allowNull","ENUM","measurementCount","VIRTUAL","INTEGER","get","items","getMeasurements","length","associate","models","User","hasOne","foreignKey","Bot","Measurements","hasMany","Measurement","as"],"mappings":"AAAA;;AACA,MAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEAC,OAAOC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,MAAIC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACpCC,QAAI;AACFC,YAAMJ,UAAUK,IAAV,EADJ;AAEFC,kBAAY,IAFV;AAGFC,oBAAcZ,UAAUa,MAHtB;AAIFC,iBAAW;AAJT,KADgC;AAOpCL,UAAM;AACJA,YAAMJ,UAAUU,IAAV,CAAe,CAAC,MAAD,EAAS,KAAT,CAAf,CADF;AAEJD,iBAAW;AAFP,KAP8B;AAWpCE,sBAAkB;AAChBF,iBAAW,IADK;AAEhBL,YAAMT,UAAUiB,OAAV,CAAkBZ,UAAUa,OAA5B,CAFU;AAGhBC,WAAK,kBAAiB;AACpB,cAAMC,QAAQ,MAAM,KAAKC,eAAL,EAApB;AACA,eAAOD,MAAME,MAAb;AACD;AANe;AAXkB,GAA1B,CAAZ;AAoBAhB,QAAMiB,SAAN,GAAkB,UAAUC,MAAV,EAAkB;AAClClB,UAAMmB,IAAN,GAAanB,MAAMoB,MAAN,CAAaF,OAAOC,IAApB,EAA0B;AACrCE,kBAAY;AADyB,KAA1B,CAAb;AAGArB,UAAMsB,GAAN,GAAYtB,MAAMoB,MAAN,CAAaF,OAAOI,GAApB,EAAyB;AACnCD,kBAAY;AADuB,KAAzB,CAAZ;AAGArB,UAAMuB,YAAN,GAAqBvB,MAAMwB,OAAN,CAAcN,OAAOO,WAArB,EAAkC;AACrDJ,kBAAY,SADyC;AAErDK,UAAI;AAFiD,KAAlC,CAArB;AAID,GAXD;AAYA,SAAO1B,KAAP;AACD,CAlCD","file":"agent.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize')\n\nmodule.exports = (sequelize, DataTypes) => {\n  var Model = sequelize.define('Agent', {\n    id: {\n      type: DataTypes.UUID(),\n      primaryKey: true,\n      defaultValue: Sequelize.UUIDV4,\n      allowNull: false,\n    },\n    type: {\n      type: DataTypes.ENUM([\"USER\", \"BOT\"]),\n      allowNull: false,\n    },\n    measurementCount: {\n      allowNull: true,\n      type: Sequelize.VIRTUAL(DataTypes.INTEGER),\n      get: async function() {\n        const items = await this.getMeasurements()\n        return items.length\n      }\n    },\n  });\n  Model.associate = function (models) {\n    Model.User = Model.hasOne(models.User, {\n      foreignKey: 'agentId',\n    })\n    Model.Bot = Model.hasOne(models.Bot, {\n      foreignKey: 'agentId',\n    })\n    Model.Measurements = Model.hasMany(models.Measurement, {\n      foreignKey: 'agentId',\n      as: 'Measurements'\n    })\n  }\n  return Model;\n};\n"]}