{"version":3,"sources":["../../../src/services/measurable/MakeAggregation.js"],"names":["makeAggregation","models","R","require","average","converge","divide","sum","length","measurable","measurements","getMeasurements","percentile25","map","m","dataValues","percentile50","percentile75","console","log","newMeasurement","Measurement","create","isAggregation","measurableId","id"],"mappings":";;;;;QAKsBA,e,GAAAA,e;;AAJtB;;IAAYC,M;;;;AADZ,MAAMC,IAAIC,QAAQ,OAAR,CAAV;;;AAGA,MAAMC,UAAUF,EAAEG,QAAF,CAAWH,EAAEI,MAAb,EAAqB,CAACJ,EAAEK,GAAH,EAAQL,EAAEM,MAAV,CAArB,CAAhB;;AAEO,eAAeR,eAAf,CAA+BS,UAA/B,EAA2C;AAChD,QAAMC,eAAe,MAAMD,WAAWE,eAAX,EAA3B;AACA,QAAMC,eAAeR,QAAQM,aAAaG,GAAb,CAAiBC,KAAKA,EAAEC,UAAF,CAAaH,YAAnC,CAAR,CAArB;AACA,QAAMI,eAAeZ,QAAQM,aAAaG,GAAb,CAAiBC,KAAKA,EAAEC,UAAF,CAAaC,YAAnC,CAAR,CAArB;AACA,QAAMC,eAAeb,QAAQM,aAAaG,GAAb,CAAiBC,KAAKA,EAAEC,UAAF,CAAaE,YAAnC,CAAR,CAArB;AACAC,UAAQC,GAAR,CAAY,oBAAZ,EAAkCT,aAAaG,GAAb,CAAiBC,KAAKA,EAAEC,UAAxB,CAAlC;AACA,QAAMK,iBAAiB,MAAMnB,OAAOoB,WAAP,CAAmBC,MAAnB,CAA0B;AACrDV,gBADqD;AAErDI,gBAFqD;AAGrDC,gBAHqD;AAIrDM,mBAAe,IAJsC;AAKrDC,kBAAcf,WAAWM,UAAX,CAAsBU;AALiB,GAA1B,CAA7B;AAOD","file":"MakeAggregation.js","sourcesContent":["const R = require('ramda');\nimport * as models from \"../../models/index\";\n\nconst average = R.converge(R.divide, [R.sum, R.length])\n\nexport async function makeAggregation(measurable) {\n  const measurements = await measurable.getMeasurements();\n  const percentile25 = average(measurements.map(m => m.dataValues.percentile25));\n  const percentile50 = average(measurements.map(m => m.dataValues.percentile50));\n  const percentile75 = average(measurements.map(m => m.dataValues.percentile75));\n  console.log(\"Found first values\", measurements.map(m => m.dataValues))\n  const newMeasurement = await models.Measurement.create({\n    percentile25,\n    percentile50,\n    percentile75,\n    isAggregation: true,\n    measurableId: measurable.dataValues.id\n  })\n}\n"]}