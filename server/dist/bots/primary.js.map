{"version":3,"sources":["../../src/bots/primary.js"],"names":["models","require","Sequelize","Op","Evaluation","constructor","previousMeasurements","evaluateFn","getPreviousMeasurements","measurement","measurements","Measurement","findAll","where","measurableId","dataValues","competitorType","createdAt","lt","run","map","m","Bot","botId","agentId","processAllMeasurements","createAggregateMeasurement","newVal","getValue","previousMeasurement","taggedMeasurementId","id","length","console","log","newMeasurement","create","relevantAt","value","evaluation","evaluate","vs","foo","filter","v","dataType","data","mean","e","bot1","findById"],"mappings":"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","file":"primary.js","sourcesContent":["const models = require(\"../models\")\nconst Sequelize = require('sequelize')\nimport _ from \"lodash\"\nconst Op = Sequelize.Op;\n\nclass Evaluation {\n  constructor({\n    previousMeasurements,\n    evaluateFn\n  }) {\n    this.previousMeasurements = previousMeasurements;\n    this.evaluateFn = evaluateFn;\n  }\n\n  async getPreviousMeasurements(measurement) {\n    let measurements = await models.Measurement.findAll({\n      where: {\n        measurableId: measurement.dataValues.measurableId,\n        competitorType: \"COMPETITIVE\",\n        createdAt: {\n          [Op.lt]: measurement.dataValues.createdAt\n        }\n      }\n    })\n    this.previousMeasurements = [measurement, ...measurements];\n  }\n\n  run() {\n    return this.evaluateFn(this.previousMeasurements.map(m => m.dataValues))\n  }\n}\n\nclass Bot {\n  constructor({\n    botId,\n    agentId,\n    evaluateFn\n  }) {\n    this.botId = botId;\n    this.agentId = agentId;\n    this.evaluateFn = evaluateFn;\n  }\n\n  async processAllMeasurements(){\n    let measurements = await models.Measurement.findAll({\n      where: {\n        competitorType: \"COMPETITIVE\",\n      }\n    });\n    for (const m of measurements){\n        await this.createAggregateMeasurement(m)\n    }\n  }\n\n  async createAggregateMeasurement(measurement) {\n    let newVal = await this.getValue(measurement);\n    let previousMeasurement = await models.Measurement.findAll({\n      where: {\n        agentId: this.agentId,\n        taggedMeasurementId: measurement.dataValues.id\n      }\n    })\n\n    if (previousMeasurement.length > 0) {\n      console.log(\"Already exists\")\n      return previousMeasurement\n    } else {\n      let newMeasurement = await models.Measurement.create({\n        agentId: this.agentId,\n        competitorType: \"AGGREGATION\",\n        measurableId: measurement.dataValues.measurableId,\n        taggedMeasurementId: measurement.id,\n        relevantAt: measurement.createdAt,\n        value: newVal\n      })\n        return newMeasurement;\n    }\n\n  }\n\n  async getValue(measurement) {\n    let evaluation = new Evaluation({\n      evaluateFn: this.evaluateFn\n    })\n    await evaluation.getPreviousMeasurements(measurement)\n    return evaluation.run()\n  }\n\n}\n\nlet evaluate = function (vs) {\n  let foo = vs.filter(v => v.value.dataType == \"floatPercentiles\");\n  return {\n    dataType: \"floatPercentiles\",\n    data: {\n      \"25.\": _.mean(foo.map(e => e.value.data[\"25.\"])) * 0.7,\n      \"50.\": _.mean(foo.map(e => e.value.data[\"50.\"])),\n      \"75.\": _.mean(foo.map(e => e.value.data[\"75.\"])) * 1.3\n    }\n  }\n}\n\nlet bot1 = new Bot({\n  botId: \"1010a04d-5307-4bd0-9246-000000000000\",\n  agentId: \"b8c2e25e-e019-4307-a4a9-704589ff6048\",\n  evaluateFn: evaluate\n})\n\nlet foo = async function () {\n  try {\n    let measurement = await models.Measurement.findById(\"3c93c859-9676-4bc5-a9af-3b34a811c8a9\")\n    await bot1.processAllMeasurements()\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nfoo()\n"]}